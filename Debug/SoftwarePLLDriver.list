
SoftwarePLLDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080020b4  080020b4  000030b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e4  080020e4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080020e4  080020e4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080020e4  080020e4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e4  080020e4  000030e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080020e8  080020e8  000030e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080020ec  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  080020f8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  080020f8  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5ea  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa8  00000000  00000000  0000f61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  000110c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfa  00000000  00000000  000118e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee5f  00000000  00000000  000124e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de1a  00000000  00000000  00021341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d2f6  00000000  00000000  0002f15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008c451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001564  00000000  00000000  0008c494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000075ba  00000000  00000000  0008d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00094fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800209c 	.word	0x0800209c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800209c 	.word	0x0800209c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b500      	push	{lr}
 8000222:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	222c      	movs	r2, #44	@ 0x2c
 8000226:	2100      	movs	r1, #0
 8000228:	a805      	add	r0, sp, #20
 800022a:	f001 ff0b 	bl	8002044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022e:	2210      	movs	r2, #16
 8000230:	2100      	movs	r1, #0
 8000232:	4668      	mov	r0, sp
 8000234:	f001 ff06 	bl	8002044 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000238:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023a:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023c:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000240:	23a0      	movs	r3, #160	@ 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000244:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000246:	320f      	adds	r2, #15
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800024c:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024e:	f000 fdb7 	bl	8000dc0 <HAL_RCC_OscConfig>
 8000252:	2800      	cmp	r0, #0
 8000254:	d001      	beq.n	800025a <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000256:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000258:	e7fe      	b.n	8000258 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025a:	2207      	movs	r2, #7
 800025c:	2302      	movs	r3, #2
 800025e:	9200      	str	r2, [sp, #0]
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	2200      	movs	r2, #0
 8000264:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000266:	2101      	movs	r1, #1
 8000268:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	9202      	str	r2, [sp, #8]
 800026c:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800026e:	f000 ffff 	bl	8001270 <HAL_RCC_ClockConfig>
 8000272:	2800      	cmp	r0, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x5a>
 8000276:	b672      	cpsid	i
  while (1)
 8000278:	e7fe      	b.n	8000278 <SystemClock_Config+0x58>
}
 800027a:	b011      	add	sp, #68	@ 0x44
 800027c:	bd00      	pop	{pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <main>:
{
 8000280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000282:	46ce      	mov	lr, r9
 8000284:	4647      	mov	r7, r8
 8000286:	b580      	push	{r7, lr}
 8000288:	b099      	sub	sp, #100	@ 0x64
  HAL_Init();
 800028a:	f000 fb49 	bl	8000920 <HAL_Init>
  SystemClock_Config();
 800028e:	f7ff ffc7 	bl	8000220 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	2214      	movs	r2, #20
 8000294:	2100      	movs	r1, #0
 8000296:	a810      	add	r0, sp, #64	@ 0x40
 8000298:	f001 fed4 	bl	8002044 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	2180      	movs	r1, #128	@ 0x80
 800029e:	4bdb      	ldr	r3, [pc, #876]	@ (800060c <main+0x38c>)
 80002a0:	0309      	lsls	r1, r1, #12
 80002a2:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80002a4:	25c0      	movs	r5, #192	@ 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	430a      	orrs	r2, r1
 80002a8:	615a      	str	r2, [r3, #20]
 80002aa:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80002ac:	00ad      	lsls	r5, r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ae:	400a      	ands	r2, r1
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002b0:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b2:	9201      	str	r2, [sp, #4]
 80002b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002b6:	695a      	ldr	r2, [r3, #20]
 80002b8:	03c9      	lsls	r1, r1, #15
 80002ba:	430a      	orrs	r2, r1
 80002bc:	615a      	str	r2, [r3, #20]
 80002be:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80002c0:	48d3      	ldr	r0, [pc, #844]	@ (8000610 <main+0x390>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c2:	400a      	ands	r2, r1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c4:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002c6:	9202      	str	r2, [sp, #8]
 80002c8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	695a      	ldr	r2, [r3, #20]
 80002cc:	0289      	lsls	r1, r1, #10
 80002ce:	430a      	orrs	r2, r1
 80002d0:	615a      	str	r2, [r3, #20]
 80002d2:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d4:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	400a      	ands	r2, r1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d8:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002da:	9203      	str	r2, [sp, #12]
 80002dc:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	02c9      	lsls	r1, r1, #11
 80002e2:	430a      	orrs	r2, r1
 80002e4:	615a      	str	r2, [r3, #20]
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	400a      	ands	r2, r1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ea:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ec:	9204      	str	r2, [sp, #16]
 80002ee:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f0:	695a      	ldr	r2, [r3, #20]
 80002f2:	0349      	lsls	r1, r1, #13
 80002f4:	430a      	orrs	r2, r1
 80002f6:	615a      	str	r2, [r3, #20]
 80002f8:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80002fa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002fc:	400b      	ands	r3, r1
 80002fe:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000300:	0029      	movs	r1, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000302:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000304:	f000 fd4e 	bl	8000da4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000308:	2303      	movs	r3, #3
 800030a:	4ac2      	ldr	r2, [pc, #776]	@ (8000614 <main+0x394>)
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800030c:	48c0      	ldr	r0, [pc, #768]	@ (8000610 <main+0x390>)
 800030e:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000310:	9210      	str	r2, [sp, #64]	@ 0x40
 8000312:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000316:	f000 fb75 	bl	8000a04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 800031a:	22f3      	movs	r2, #243	@ 0xf3
 800031c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800031e:	48be      	ldr	r0, [pc, #760]	@ (8000618 <main+0x398>)
 8000320:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000322:	9210      	str	r2, [sp, #64]	@ 0x40
 8000324:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000328:	f000 fb6c 	bl	8000a04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin;
 800032c:	2390      	movs	r3, #144	@ 0x90
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800032e:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = B1_Pin;
 8000330:	2201      	movs	r2, #1
 8000332:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000334:	a910      	add	r1, sp, #64	@ 0x40
 8000336:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = B1_Pin;
 8000338:	9210      	str	r2, [sp, #64]	@ 0x40
 800033a:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800033e:	f000 fb61 	bl	8000a04 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	2090      	movs	r0, #144	@ 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8000344:	2303      	movs	r3, #3
 8000346:	4ab5      	ldr	r2, [pc, #724]	@ (800061c <main+0x39c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000348:	a910      	add	r1, sp, #64	@ 0x40
 800034a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 800034c:	9210      	str	r2, [sp, #64]	@ 0x40
 800034e:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000350:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000352:	f000 fb57 	bl	8000a04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_10
 8000356:	2303      	movs	r3, #3
 8000358:	4ab1      	ldr	r2, [pc, #708]	@ (8000620 <main+0x3a0>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	48b2      	ldr	r0, [pc, #712]	@ (8000624 <main+0x3a4>)
 800035c:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_10
 800035e:	9210      	str	r2, [sp, #64]	@ 0x40
 8000360:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	f000 fb4e 	bl	8000a04 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000368:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800036a:	48a9      	ldr	r0, [pc, #676]	@ (8000610 <main+0x390>)
 800036c:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 800036e:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000370:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000372:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000374:	9413      	str	r4, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000376:	f000 fb45 	bl	8000a04 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800037a:	2303      	movs	r3, #3
 800037c:	2204      	movs	r2, #4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800037e:	48aa      	ldr	r0, [pc, #680]	@ (8000628 <main+0x3a8>)
 8000380:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000382:	9210      	str	r2, [sp, #64]	@ 0x40
 8000384:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000386:	9412      	str	r4, [sp, #72]	@ 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000388:	f000 fb3c 	bl	8000a04 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038c:	2210      	movs	r2, #16
 800038e:	2100      	movs	r1, #0
 8000390:	a808      	add	r0, sp, #32
 8000392:	f001 fe57 	bl	8002044 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000396:	2214      	movs	r2, #20
 8000398:	2100      	movs	r1, #0
 800039a:	a810      	add	r0, sp, #64	@ 0x40
 800039c:	f001 fe52 	bl	8002044 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	2208      	movs	r2, #8
 80003a2:	2100      	movs	r1, #0
 80003a4:	a806      	add	r0, sp, #24
 80003a6:	f001 fe4d 	bl	8002044 <memset>
  htim1.Instance->DIER = TIM_DIER_TIE;
 80003aa:	2240      	movs	r2, #64	@ 0x40
  htim1.Instance = TIM1;
 80003ac:	4d9f      	ldr	r5, [pc, #636]	@ (800062c <main+0x3ac>)
 80003ae:	4ba0      	ldr	r3, [pc, #640]	@ (8000630 <main+0x3b0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003b0:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 80003b2:	602b      	str	r3, [r5, #0]
  htim1.Instance->DIER = TIM_DIER_TIE;
 80003b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Period = 65535;
 80003b6:	4b9a      	ldr	r3, [pc, #616]	@ (8000620 <main+0x3a0>)
  htim1.Init.Prescaler = 0;
 80003b8:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ba:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65535;
 80003bc:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c0:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;//TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003c2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003c4:	f001 f83c 	bl	8001440 <HAL_TIM_Base_Init>
 80003c8:	2800      	cmp	r0, #0
 80003ca:	d001      	beq.n	80003d0 <main+0x150>
 80003cc:	b672      	cpsid	i
  while (1)
 80003ce:	e7fe      	b.n	80003ce <main+0x14e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d0:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d2:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003d6:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d8:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003da:	f001 fbeb 	bl	8001bb4 <HAL_TIM_ConfigClockSource>
 80003de:	2800      	cmp	r0, #0
 80003e0:	d001      	beq.n	80003e6 <main+0x166>
 80003e2:	b672      	cpsid	i
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <main+0x164>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80003e6:	2704      	movs	r7, #4
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80003e8:	2370      	movs	r3, #112	@ 0x70
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80003ea:	9012      	str	r0, [sp, #72]	@ 0x48
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80003ec:	9013      	str	r0, [sp, #76]	@ 0x4c
  sSlaveConfig.TriggerFilter = 0;
 80003ee:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80003f0:	a910      	add	r1, sp, #64	@ 0x40
 80003f2:	0028      	movs	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80003f4:	9710      	str	r7, [sp, #64]	@ 0x40
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80003f6:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80003f8:	f001 fc8c 	bl	8001d14 <HAL_TIM_SlaveConfigSynchro>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d001      	beq.n	8000404 <main+0x184>
 8000400:	b672      	cpsid	i
  while (1)
 8000402:	e7fe      	b.n	8000402 <main+0x182>
  sMasterConfig.MasterOutputTrigger =  TIM_TRGO_RESET;
 8000404:	2200      	movs	r2, #0
 8000406:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000408:	0028      	movs	r0, r5
 800040a:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger =  TIM_TRGO_RESET;
 800040c:	9206      	str	r2, [sp, #24]
 800040e:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000410:	f001 fdb4 	bl	8001f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000414:	1e04      	subs	r4, r0, #0
 8000416:	d001      	beq.n	800041c <main+0x19c>
 8000418:	b672      	cpsid	i
  while (1)
 800041a:	e7fe      	b.n	800041a <main+0x19a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800041c:	0001      	movs	r1, r0
 800041e:	221c      	movs	r2, #28
 8000420:	a808      	add	r0, sp, #32
 8000422:	f001 fe0f 	bl	8002044 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000426:	2220      	movs	r2, #32
 8000428:	0021      	movs	r1, r4
 800042a:	a810      	add	r0, sp, #64	@ 0x40
 800042c:	f001 fe0a 	bl	8002044 <memset>
  htim15.Instance = TIM15;
 8000430:	4e80      	ldr	r6, [pc, #512]	@ (8000634 <main+0x3b4>)
 8000432:	4b81      	ldr	r3, [pc, #516]	@ (8000638 <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000434:	0030      	movs	r0, r6
  htim15.Instance = TIM15;
 8000436:	6033      	str	r3, [r6, #0]
  htim15.Init.Prescaler = 4799;
 8000438:	4b80      	ldr	r3, [pc, #512]	@ (800063c <main+0x3bc>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800043a:	60b4      	str	r4, [r6, #8]
  htim15.Init.Prescaler = 4799;
 800043c:	4698      	mov	r8, r3
 800043e:	6073      	str	r3, [r6, #4]
  htim15.Init.Period = 249;
 8000440:	23f9      	movs	r3, #249	@ 0xf9
 8000442:	60f3      	str	r3, [r6, #12]
  htim15.Init.RepetitionCounter = 40-1;
 8000444:	3bd2      	subs	r3, #210	@ 0xd2
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	6134      	str	r4, [r6, #16]
  htim15.Init.RepetitionCounter = 40-1;
 8000448:	6173      	str	r3, [r6, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044a:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800044c:	f000 fff8 	bl	8001440 <HAL_TIM_Base_Init>
 8000450:	2800      	cmp	r0, #0
 8000452:	d001      	beq.n	8000458 <main+0x1d8>
 8000454:	b672      	cpsid	i
  while (1)
 8000456:	e7fe      	b.n	8000456 <main+0x1d6>
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000458:	0030      	movs	r0, r6
 800045a:	f001 f8d7 	bl	800160c <HAL_TIM_PWM_Init>
 800045e:	2800      	cmp	r0, #0
 8000460:	d001      	beq.n	8000466 <main+0x1e6>
 8000462:	b672      	cpsid	i
  while (1)
 8000464:	e7fe      	b.n	8000464 <main+0x1e4>
  if (HAL_TIM_OnePulse_Init(&htim15, TIM_OPMODE_SINGLE) != HAL_OK)
 8000466:	2108      	movs	r1, #8
 8000468:	0030      	movs	r0, r6
 800046a:	f001 f9b9 	bl	80017e0 <HAL_TIM_OnePulse_Init>
 800046e:	2800      	cmp	r0, #0
 8000470:	d001      	beq.n	8000476 <main+0x1f6>
 8000472:	b672      	cpsid	i
  while (1)
 8000474:	e7fe      	b.n	8000474 <main+0x1f4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000476:	2360      	movs	r3, #96	@ 0x60
 8000478:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 125;
 800047a:	331d      	adds	r3, #29
 800047c:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800047e:	3b7b      	subs	r3, #123	@ 0x7b
 8000480:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000482:	3306      	adds	r3, #6
 8000484:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000486:	2380      	movs	r3, #128	@ 0x80
 8000488:	2200      	movs	r2, #0
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	920c      	str	r2, [sp, #48]	@ 0x30
 800048e:	930d      	str	r3, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000490:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000492:	003a      	movs	r2, r7
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000494:	009b      	lsls	r3, r3, #2
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000496:	0030      	movs	r0, r6
 8000498:	a908      	add	r1, sp, #32
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800049a:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800049c:	f001 fa84 	bl	80019a8 <HAL_TIM_PWM_ConfigChannel>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d001      	beq.n	80004a8 <main+0x228>
 80004a4:	b672      	cpsid	i
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <main+0x226>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80004a8:	2380      	movs	r3, #128	@ 0x80
 80004aa:	011b      	lsls	r3, r3, #4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004ac:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80004ae:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004b0:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004b2:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004b4:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80004b6:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004b8:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80004ba:	a910      	add	r1, sp, #64	@ 0x40
 80004bc:	0030      	movs	r0, r6
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004be:	9214      	str	r2, [sp, #80]	@ 0x50
 80004c0:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80004c2:	f001 fd89 	bl	8001fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 80004c6:	1e07      	subs	r7, r0, #0
 80004c8:	d001      	beq.n	80004ce <main+0x24e>
 80004ca:	b672      	cpsid	i
  while (1)
 80004cc:	e7fe      	b.n	80004cc <main+0x24c>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim15, TIM_CHANNEL_2);
 80004ce:	6832      	ldr	r2, [r6, #0]
 80004d0:	495b      	ldr	r1, [pc, #364]	@ (8000640 <main+0x3c0>)
 80004d2:	6993      	ldr	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim15);
 80004d4:	0030      	movs	r0, r6
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim15, TIM_CHANNEL_2);
 80004d6:	400b      	ands	r3, r1
 80004d8:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim15);
 80004da:	f000 f935 	bl	8000748 <HAL_TIM_MspPostInit>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004de:	221c      	movs	r2, #28
 80004e0:	0039      	movs	r1, r7
 80004e2:	a808      	add	r0, sp, #32
 80004e4:	f001 fdae 	bl	8002044 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e8:	2220      	movs	r2, #32
 80004ea:	0039      	movs	r1, r7
 80004ec:	a810      	add	r0, sp, #64	@ 0x40
 80004ee:	f001 fda9 	bl	8002044 <memset>
  htim16.Instance = TIM16;
 80004f2:	4c54      	ldr	r4, [pc, #336]	@ (8000644 <main+0x3c4>)
 80004f4:	4b54      	ldr	r3, [pc, #336]	@ (8000648 <main+0x3c8>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80004f6:	0020      	movs	r0, r4
  htim16.Instance = TIM16;
 80004f8:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 4799;
 80004fa:	4643      	mov	r3, r8
 80004fc:	6063      	str	r3, [r4, #4]
  htim16.Init.Period = 999;
 80004fe:	4b53      	ldr	r3, [pc, #332]	@ (800064c <main+0x3cc>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000500:	60a7      	str	r7, [r4, #8]
  htim16.Init.Period = 999;
 8000502:	60e3      	str	r3, [r4, #12]
  htim16.Init.RepetitionCounter = 10-1;
 8000504:	2309      	movs	r3, #9
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000506:	6127      	str	r7, [r4, #16]
  htim16.Init.RepetitionCounter = 10-1;
 8000508:	6163      	str	r3, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800050a:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800050c:	f000 ff98 	bl	8001440 <HAL_TIM_Base_Init>
 8000510:	2800      	cmp	r0, #0
 8000512:	d001      	beq.n	8000518 <main+0x298>
 8000514:	b672      	cpsid	i
  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x296>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000518:	0020      	movs	r0, r4
 800051a:	f001 f877 	bl	800160c <HAL_TIM_PWM_Init>
 800051e:	2800      	cmp	r0, #0
 8000520:	d001      	beq.n	8000526 <main+0x2a6>
 8000522:	b672      	cpsid	i
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x2a4>
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000526:	2108      	movs	r1, #8
 8000528:	0020      	movs	r0, r4
 800052a:	f001 f959 	bl	80017e0 <HAL_TIM_OnePulse_Init>
 800052e:	1e02      	subs	r2, r0, #0
 8000530:	d001      	beq.n	8000536 <main+0x2b6>
 8000532:	b672      	cpsid	i
  while (1)
 8000534:	e7fe      	b.n	8000534 <main+0x2b4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000536:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	2000      	movs	r0, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800053c:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 500;
 800053e:	3395      	adds	r3, #149	@ 0x95
 8000540:	33ff      	adds	r3, #255	@ 0xff
 8000542:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000544:	3bf3      	subs	r3, #243	@ 0xf3
 8000546:	3bff      	subs	r3, #255	@ 0xff
 8000548:	4698      	mov	r8, r3
 800054a:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800054c:	3306      	adds	r3, #6
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800054e:	0049      	lsls	r1, r1, #1
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000550:	4699      	mov	r9, r3
 8000552:	930b      	str	r3, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000554:	33f9      	adds	r3, #249	@ 0xf9
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000556:	900c      	str	r0, [sp, #48]	@ 0x30
 8000558:	910d      	str	r1, [sp, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800055a:	33ff      	adds	r3, #255	@ 0xff
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800055c:	0020      	movs	r0, r4
 800055e:	a908      	add	r1, sp, #32
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8000560:	930e      	str	r3, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000562:	f001 fa21 	bl	80019a8 <HAL_TIM_PWM_ConfigChannel>
 8000566:	2800      	cmp	r0, #0
 8000568:	d001      	beq.n	800056e <main+0x2ee>
 800056a:	b672      	cpsid	i
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x2ec>
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000572:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000574:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000576:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8000578:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800057a:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800057c:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800057e:	a910      	add	r1, sp, #64	@ 0x40
 8000580:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000582:	9214      	str	r2, [sp, #80]	@ 0x50
 8000584:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000586:	f001 fd27 	bl	8001fd8 <HAL_TIMEx_ConfigBreakDeadTime>
 800058a:	1e07      	subs	r7, r0, #0
 800058c:	d001      	beq.n	8000592 <main+0x312>
 800058e:	b672      	cpsid	i
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x310>
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000592:	4649      	mov	r1, r9
 8000594:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim16);
 8000596:	0020      	movs	r0, r4
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000598:	6993      	ldr	r3, [r2, #24]
 800059a:	438b      	bics	r3, r1
 800059c:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim16);
 800059e:	f000 f8d3 	bl	8000748 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start(&htim1);
 80005a2:	0028      	movs	r0, r5
 80005a4:	f000 ffd8 	bl	8001558 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim15);
 80005a8:	0030      	movs	r0, r6
 80005aa:	f000 ffd5 	bl	8001558 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 80005ae:	0020      	movs	r0, r4
 80005b0:	f000 ffd2 	bl	8001558 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim15);
 80005b4:	0030      	movs	r0, r6
 80005b6:	f000 fff9 	bl	80015ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80005ba:	0020      	movs	r0, r4
 80005bc:	f000 fff6 	bl	80015ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	0030      	movs	r0, r6
 80005c4:	f001 f8ae 	bl	8001724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80005c8:	0039      	movs	r1, r7
 80005ca:	0020      	movs	r0, r4
 80005cc:	f001 f8aa 	bl	8001724 <HAL_TIM_PWM_Start>
  HAL_TIM_OnePulse_Start_IT(&htim15, TIM_CHANNEL_2);
 80005d0:	2104      	movs	r1, #4
 80005d2:	0030      	movs	r0, r6
 80005d4:	f001 f990 	bl	80018f8 <HAL_TIM_OnePulse_Start_IT>
  HAL_TIM_OnePulse_Start_IT(&htim16, TIM_CHANNEL_1);
 80005d8:	0039      	movs	r1, r7
 80005da:	0020      	movs	r0, r4
 80005dc:	f001 f98c 	bl	80018f8 <HAL_TIM_OnePulse_Start_IT>
  HAL_NVIC_SetPriority(TIM_IT_TRIGGER,0, 0);
 80005e0:	003a      	movs	r2, r7
 80005e2:	0039      	movs	r1, r7
 80005e4:	2040      	movs	r0, #64	@ 0x40
 80005e6:	f000 f9bd 	bl	8000964 <HAL_NVIC_SetPriority>
  __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_CC1);
 80005ea:	4641      	mov	r1, r8
 80005ec:	682a      	ldr	r2, [r5, #0]
  HAL_NVIC_SetPriority(TIM_IT_TRIGGER,0, 0);
 80005ee:	2040      	movs	r0, #64	@ 0x40
  __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_CC1);
 80005f0:	68d3      	ldr	r3, [r2, #12]
 80005f2:	4319      	orrs	r1, r3
 80005f4:	60d1      	str	r1, [r2, #12]
  HAL_NVIC_SetPriority(TIM_IT_TRIGGER,0, 0);
 80005f6:	003a      	movs	r2, r7
 80005f8:	0039      	movs	r1, r7
 80005fa:	f000 f9b3 	bl	8000964 <HAL_NVIC_SetPriority>
  __HAL_TIM_ENABLE_IT(&htim1,TIM_IT_TRIGGER);
 80005fe:	2340      	movs	r3, #64	@ 0x40
 8000600:	682a      	ldr	r2, [r5, #0]
 8000602:	68d1      	ldr	r1, [r2, #12]
 8000604:	430b      	orrs	r3, r1
 8000606:	60d3      	str	r3, [r2, #12]
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x388>
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	40021000 	.word	0x40021000
 8000610:	48000800 	.word	0x48000800
 8000614:	0000fcff 	.word	0x0000fcff
 8000618:	48001400 	.word	0x48001400
 800061c:	00008fb6 	.word	0x00008fb6
 8000620:	0000ffff 	.word	0x0000ffff
 8000624:	48000400 	.word	0x48000400
 8000628:	48000c00 	.word	0x48000c00
 800062c:	200000b8 	.word	0x200000b8
 8000630:	40012c00 	.word	0x40012c00
 8000634:	20000070 	.word	0x20000070
 8000638:	40014000 	.word	0x40014000
 800063c:	000012bf 	.word	0x000012bf
 8000640:	fffff7ff 	.word	0xfffff7ff
 8000644:	20000028 	.word	0x20000028
 8000648:	40014400 	.word	0x40014400
 800064c:	000003e7 	.word	0x000003e7

08000650 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	2201      	movs	r2, #1
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <HAL_MspInit+0x2c>)
{
 8000654:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000656:	6999      	ldr	r1, [r3, #24]
 8000658:	4311      	orrs	r1, r2
 800065a:	6199      	str	r1, [r3, #24]
 800065c:	6999      	ldr	r1, [r3, #24]
 800065e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	9200      	str	r2, [sp, #0]
 8000664:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	0549      	lsls	r1, r1, #21
 800066a:	430a      	orrs	r2, r1
 800066c:	61da      	str	r2, [r3, #28]
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	400b      	ands	r3, r1
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	b002      	add	sp, #8
 8000678:	4770      	bx	lr
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000680:	b510      	push	{r4, lr}
 8000682:	0004      	movs	r4, r0
 8000684:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	2214      	movs	r2, #20
 8000688:	2100      	movs	r1, #0
 800068a:	a804      	add	r0, sp, #16
 800068c:	f001 fcda 	bl	8002044 <memset>
  if(htim_base->Instance==TIM1)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	4a29      	ldr	r2, [pc, #164]	@ (8000738 <HAL_TIM_Base_MspInit+0xb8>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d01d      	beq.n	80006d4 <HAL_TIM_Base_MspInit+0x54>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
    /* USER CODE BEGIN TIM1_MspInit 1 */

    /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8000698:	4a28      	ldr	r2, [pc, #160]	@ (800073c <HAL_TIM_Base_MspInit+0xbc>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d004      	beq.n	80006a8 <HAL_TIM_Base_MspInit+0x28>
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }else if(htim_base->Instance==TIM16)
 800069e:	4a28      	ldr	r2, [pc, #160]	@ (8000740 <HAL_TIM_Base_MspInit+0xc0>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d00c      	beq.n	80006be <HAL_TIM_Base_MspInit+0x3e>

    /* USER CODE END TIM16_MspInit 1 */
  }


}
 80006a4:	b00a      	add	sp, #40	@ 0x28
 80006a6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM15_CLK_ENABLE();
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <HAL_TIM_Base_MspInit+0xc4>)
 80006ac:	0249      	lsls	r1, r1, #9
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	430a      	orrs	r2, r1
 80006b2:	619a      	str	r2, [r3, #24]
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	400b      	ands	r3, r1
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	9b02      	ldr	r3, [sp, #8]
 80006bc:	e7f2      	b.n	80006a4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <HAL_TIM_Base_MspInit+0xc4>)
 80006c2:	0289      	lsls	r1, r1, #10
 80006c4:	699a      	ldr	r2, [r3, #24]
 80006c6:	430a      	orrs	r2, r1
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	400b      	ands	r3, r1
 80006ce:	9303      	str	r3, [sp, #12]
 80006d0:	9b03      	ldr	r3, [sp, #12]
}
 80006d2:	e7e7      	b.n	80006a4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006d4:	2180      	movs	r1, #128	@ 0x80
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <HAL_TIM_Base_MspInit+0xc4>)
 80006d8:	0109      	lsls	r1, r1, #4
 80006da:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006de:	430a      	orrs	r2, r1
 80006e0:	619a      	str	r2, [r3, #24]
 80006e2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006e6:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006ea:	9200      	str	r2, [sp, #0]
 80006ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	695a      	ldr	r2, [r3, #20]
 80006f0:	0289      	lsls	r1, r1, #10
 80006f2:	430a      	orrs	r2, r1
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006f8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	400b      	ands	r3, r1
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000700:	2302      	movs	r3, #2
 8000702:	0152      	lsls	r2, r2, #5
 8000704:	9204      	str	r2, [sp, #16]
 8000706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000708:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800070c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800070e:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	f000 f978 	bl	8000a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	200d      	movs	r0, #13
 800071a:	f000 f923 	bl	8000964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800071e:	200d      	movs	r0, #13
 8000720:	f000 f94a 	bl	80009b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	200e      	movs	r0, #14
 800072a:	f000 f91b 	bl	8000964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800072e:	200e      	movs	r0, #14
 8000730:	f000 f942 	bl	80009b8 <HAL_NVIC_EnableIRQ>
 8000734:	e7b6      	b.n	80006a4 <HAL_TIM_Base_MspInit+0x24>
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	40012c00 	.word	0x40012c00
 800073c:	40014000 	.word	0x40014000
 8000740:	40014400 	.word	0x40014400
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000748:	b510      	push	{r4, lr}
 800074a:	0004      	movs	r4, r0
 800074c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	2214      	movs	r2, #20
 8000750:	2100      	movs	r1, #0
 8000752:	a802      	add	r0, sp, #8
 8000754:	f001 fc76 	bl	8002044 <memset>
  if(htim->Instance==TIM15)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	4a1d      	ldr	r2, [pc, #116]	@ (80007d0 <HAL_TIM_MspPostInit+0x88>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d004      	beq.n	800076a <HAL_TIM_MspPostInit+0x22>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USER CODE BEGIN TIM15_MspPostInit 1 */

    /* USER CODE END TIM15_MspPostInit 1 */
  }else if(htim->Instance==TIM16)
 8000760:	4a1c      	ldr	r2, [pc, #112]	@ (80007d4 <HAL_TIM_MspPostInit+0x8c>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d019      	beq.n	800079a <HAL_TIM_MspPostInit+0x52>
    /* USER CODE BEGIN TIM16_MspPostInit 1 */

    /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000766:	b008      	add	sp, #32
 8000768:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2180      	movs	r1, #128	@ 0x80
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <HAL_TIM_MspPostInit+0x90>)
 800076e:	0289      	lsls	r1, r1, #10
 8000770:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	430a      	orrs	r2, r1
 8000776:	615a      	str	r2, [r3, #20]
 8000778:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077a:	2208      	movs	r2, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	400b      	ands	r3, r1
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000782:	2302      	movs	r3, #2
 8000784:	9202      	str	r2, [sp, #8]
 8000786:	9303      	str	r3, [sp, #12]
 8000788:	2202      	movs	r2, #2
 800078a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	a902      	add	r1, sp, #8
 800078e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000790:	9204      	str	r2, [sp, #16]
 8000792:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000794:	f000 f936 	bl	8000a04 <HAL_GPIO_Init>
 8000798:	e7e5      	b.n	8000766 <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079a:	2180      	movs	r1, #128	@ 0x80
 800079c:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <HAL_TIM_MspPostInit+0x90>)
 800079e:	0289      	lsls	r1, r1, #10
 80007a0:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a2:	2090      	movs	r0, #144	@ 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a4:	430a      	orrs	r2, r1
 80007a6:	615a      	str	r2, [r3, #20]
 80007a8:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007aa:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	400b      	ands	r3, r1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007b2:	2302      	movs	r3, #2
 80007b4:	9202      	str	r2, [sp, #8]
 80007b6:	9303      	str	r3, [sp, #12]
 80007b8:	2202      	movs	r2, #2
 80007ba:	2303      	movs	r3, #3
 80007bc:	9204      	str	r2, [sp, #16]
 80007be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 80007c0:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	a902      	add	r1, sp, #8
 80007c4:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 80007c6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c8:	f000 f91c 	bl	8000a04 <HAL_GPIO_Init>
}
 80007cc:	e7cb      	b.n	8000766 <HAL_TIM_MspPostInit+0x1e>
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	40014000 	.word	0x40014000
 80007d4:	40014400 	.word	0x40014400
 80007d8:	40021000 	.word	0x40021000

080007dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler>
 80007de:	46c0      	nop			@ (mov r8, r8)

080007e0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <HardFault_Handler>
 80007e2:	46c0      	nop			@ (mov r8, r8)

080007e4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007e4:	4770      	bx	lr
 80007e6:	46c0      	nop			@ (mov r8, r8)

080007e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80007e8:	4770      	bx	lr
 80007ea:	46c0      	nop			@ (mov r8, r8)

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ee:	f000 f8a7 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bd10      	pop	{r4, pc}

080007f4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80007f4:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
  if(__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_TRIGGER)) {
 80007f6:	4c11      	ldr	r4, [pc, #68]	@ (800083c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x48>)
 80007f8:	6822      	ldr	r2, [r4, #0]
 80007fa:	6913      	ldr	r3, [r2, #16]
 80007fc:	065b      	lsls	r3, r3, #25
 80007fe:	d403      	bmi.n	8000808 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>

	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);  // Toggle LED on trigger
  }

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000800:	0020      	movs	r0, r4
 8000802:	f001 fb17 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}
	    htim15.Instance->CNT = 125;
 8000808:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x4c>)
	    htim16.Instance->CNT = 500;
 800080a:	20fa      	movs	r0, #250	@ 0xfa
	    htim15.Instance->CNT = 125;
 800080c:	6819      	ldr	r1, [r3, #0]
 800080e:	237d      	movs	r3, #125	@ 0x7d
		htim15.Instance->CR1|= TIM_CR1_CEN;
 8000810:	2501      	movs	r5, #1
	    htim15.Instance->CNT = 125;
 8000812:	624b      	str	r3, [r1, #36]	@ 0x24
	    htim16.Instance->CNT = 500;
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x50>)
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6258      	str	r0, [r3, #36]	@ 0x24
		htim15.Instance->CR1|= TIM_CR1_CEN;
 800081c:	6808      	ldr	r0, [r1, #0]
 800081e:	4328      	orrs	r0, r5
 8000820:	6008      	str	r0, [r1, #0]
		htim16.Instance->CR1|= TIM_CR1_CEN;
 8000822:	6819      	ldr	r1, [r3, #0]
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);  // Toggle LED on trigger
 8000824:	4808      	ldr	r0, [pc, #32]	@ (8000848 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x54>)
		htim16.Instance->CR1|= TIM_CR1_CEN;
 8000826:	4329      	orrs	r1, r5
 8000828:	6019      	str	r1, [r3, #0]
	    __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_TRIGGER);
 800082a:	2341      	movs	r3, #65	@ 0x41
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);  // Toggle LED on trigger
 800082c:	2180      	movs	r1, #128	@ 0x80
	    __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_TRIGGER);
 800082e:	425b      	negs	r3, r3
 8000830:	6113      	str	r3, [r2, #16]
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);  // Toggle LED on trigger
 8000832:	0049      	lsls	r1, r1, #1
 8000834:	f000 fabc 	bl	8000db0 <HAL_GPIO_TogglePin>
 8000838:	e7e2      	b.n	8000800 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	200000b8 	.word	0x200000b8
 8000840:	20000070 	.word	0x20000070
 8000844:	20000028 	.word	0x20000028
 8000848:	48000800 	.word	0x48000800

0800084c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800084c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800084e:	4802      	ldr	r0, [pc, #8]	@ (8000858 <TIM1_CC_IRQHandler+0xc>)
 8000850:	f001 faf0 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000854:	bd10      	pop	{r4, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	200000b8 	.word	0x200000b8

0800085c <TIM15_IRQHandler>:


void TIM15_IRQHandler(void)
{
 800085c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800085e:	4802      	ldr	r0, [pc, #8]	@ (8000868 <TIM15_IRQHandler+0xc>)
 8000860:	f001 fae8 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000864:	bd10      	pop	{r4, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	20000070 	.word	0x20000070

0800086c <TIM16_IRQHandler>:


void TIM16_IRQHandler(void)
{
 800086c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800086e:	4802      	ldr	r0, [pc, #8]	@ (8000878 <TIM16_IRQHandler+0xc>)
 8000870:	f001 fae0 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000874:	bd10      	pop	{r4, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	20000028 	.word	0x20000028

0800087c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			@ (mov r8, r8)

08000880 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000882:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000884:	f7ff fffa 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000888:	480c      	ldr	r0, [pc, #48]	@ (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 800088a:	490d      	ldr	r1, [pc, #52]	@ (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800088c:	4a0d      	ldr	r2, [pc, #52]	@ (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a0:	4c0a      	ldr	r4, [pc, #40]	@ (80008cc <LoopForever+0x16>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ae:	f001 fbd1 	bl	8002054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff fce5 	bl	8000280 <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   r0, =_estack
 80008b8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008c4:	080020ec 	.word	0x080020ec
  ldr r2, =_sbss
 80008c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008cc:	20000104 	.word	0x20000104

080008d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_IRQHandler>
	...

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b570      	push	{r4, r5, r6, lr}
 80008d6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	20fa      	movs	r0, #250	@ 0xfa
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <HAL_InitTick+0x40>)
 80008dc:	0080      	lsls	r0, r0, #2
 80008de:	7819      	ldrb	r1, [r3, #0]
 80008e0:	f7ff fc12 	bl	8000108 <__udivsi3>
 80008e4:	4d0c      	ldr	r5, [pc, #48]	@ (8000918 <HAL_InitTick+0x44>)
 80008e6:	0001      	movs	r1, r0
 80008e8:	6828      	ldr	r0, [r5, #0]
 80008ea:	f7ff fc0d 	bl	8000108 <__udivsi3>
 80008ee:	f000 f86f 	bl	80009d0 <HAL_SYSTICK_Config>
 80008f2:	2800      	cmp	r0, #0
 80008f4:	d10c      	bne.n	8000910 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80008f6:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	2c03      	cmp	r4, #3
 80008fa:	d900      	bls.n	80008fe <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	3802      	subs	r0, #2
 8000900:	2200      	movs	r2, #0
 8000902:	0021      	movs	r1, r4
 8000904:	f000 f82e 	bl	8000964 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <HAL_InitTick+0x48>)
 800090a:	2000      	movs	r0, #0
 800090c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800090e:	e7f5      	b.n	80008fc <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000910:	2001      	movs	r0, #1
 8000912:	e7f3      	b.n	80008fc <HAL_InitTick+0x28>
 8000914:	20000004 	.word	0x20000004
 8000918:	20000000 	.word	0x20000000
 800091c:	20000008 	.word	0x20000008

08000920 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	2110      	movs	r1, #16
 8000922:	4a06      	ldr	r2, [pc, #24]	@ (800093c <HAL_Init+0x1c>)
{
 8000924:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000926:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000928:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092a:	430b      	orrs	r3, r1
 800092c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800092e:	f7ff ffd1 	bl	80008d4 <HAL_InitTick>
  HAL_MspInit();
 8000932:	f7ff fe8d 	bl	8000650 <HAL_MspInit>
}
 8000936:	2000      	movs	r0, #0
 8000938:	bd10      	pop	{r4, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	40022000 	.word	0x40022000

08000940 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000940:	4a03      	ldr	r2, [pc, #12]	@ (8000950 <HAL_IncTick+0x10>)
 8000942:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <HAL_IncTick+0x14>)
 8000944:	6811      	ldr	r1, [r2, #0]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	185b      	adds	r3, r3, r1
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	4770      	bx	lr
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	20000100 	.word	0x20000100
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000958:	4b01      	ldr	r3, [pc, #4]	@ (8000960 <HAL_GetTick+0x8>)
 800095a:	6818      	ldr	r0, [r3, #0]
}
 800095c:	4770      	bx	lr
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	20000100 	.word	0x20000100

08000964 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000964:	22ff      	movs	r2, #255	@ 0xff
 8000966:	2303      	movs	r3, #3
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b510      	push	{r4, lr}
 800096a:	0014      	movs	r4, r2
 800096c:	4003      	ands	r3, r0
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000972:	0189      	lsls	r1, r1, #6
 8000974:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000976:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000978:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800097a:	2800      	cmp	r0, #0
 800097c:	db0b      	blt.n	8000996 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <HAL_NVIC_SetPriority+0x4c>)
 8000980:	21c0      	movs	r1, #192	@ 0xc0
 8000982:	469c      	mov	ip, r3
 8000984:	0880      	lsrs	r0, r0, #2
 8000986:	0080      	lsls	r0, r0, #2
 8000988:	4460      	add	r0, ip
 800098a:	0089      	lsls	r1, r1, #2
 800098c:	5843      	ldr	r3, [r0, r1]
 800098e:	4023      	ands	r3, r4
 8000990:	4313      	orrs	r3, r2
 8000992:	5043      	str	r3, [r0, r1]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000994:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000996:	230f      	movs	r3, #15
 8000998:	4906      	ldr	r1, [pc, #24]	@ (80009b4 <HAL_NVIC_SetPriority+0x50>)
 800099a:	4003      	ands	r3, r0
 800099c:	468c      	mov	ip, r1
 800099e:	3b08      	subs	r3, #8
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	4463      	add	r3, ip
 80009a6:	69d9      	ldr	r1, [r3, #28]
 80009a8:	400c      	ands	r4, r1
 80009aa:	4314      	orrs	r4, r2
 80009ac:	61dc      	str	r4, [r3, #28]
 80009ae:	e7f1      	b.n	8000994 <HAL_NVIC_SetPriority+0x30>
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009b8:	2800      	cmp	r0, #0
 80009ba:	db05      	blt.n	80009c8 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009bc:	221f      	movs	r2, #31
 80009be:	2301      	movs	r3, #1
 80009c0:	4002      	ands	r2, r0
 80009c2:	4093      	lsls	r3, r2
 80009c4:	4a01      	ldr	r2, [pc, #4]	@ (80009cc <HAL_NVIC_EnableIRQ+0x14>)
 80009c6:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009c8:	4770      	bx	lr
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	e000e100 	.word	0xe000e100

080009d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	2280      	movs	r2, #128	@ 0x80
 80009d2:	1e43      	subs	r3, r0, #1
 80009d4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80009d6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d20e      	bcs.n	80009fa <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009de:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	4807      	ldr	r0, [pc, #28]	@ (8000a00 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e4:	6a03      	ldr	r3, [r0, #32]
 80009e6:	0609      	lsls	r1, r1, #24
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	430b      	orrs	r3, r1
 80009ee:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	3307      	adds	r3, #7
 80009f8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009fa:	4770      	bx	lr
 80009fc:	e000e010 	.word	0xe000e010
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	46de      	mov	lr, fp
 8000a08:	4657      	mov	r7, sl
 8000a0a:	464e      	mov	r6, r9
 8000a0c:	4645      	mov	r5, r8
 8000a0e:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a10:	680a      	ldr	r2, [r1, #0]
{
 8000a12:	468b      	mov	fp, r1
 8000a14:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a16:	2a00      	cmp	r2, #0
 8000a18:	d075      	beq.n	8000b06 <HAL_GPIO_Init+0x102>
 8000a1a:	2190      	movs	r1, #144	@ 0x90
  uint32_t position = 0x00u;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	05c9      	lsls	r1, r1, #23
 8000a20:	4288      	cmp	r0, r1
 8000a22:	d100      	bne.n	8000a26 <HAL_GPIO_Init+0x22>
 8000a24:	e0d2      	b.n	8000bcc <HAL_GPIO_Init+0x1c8>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	49d9      	ldr	r1, [pc, #868]	@ (8000d8c <HAL_GPIO_Init+0x388>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a28:	4fd9      	ldr	r7, [pc, #868]	@ (8000d90 <HAL_GPIO_Init+0x38c>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	468c      	mov	ip, r1
 8000a2c:	4659      	mov	r1, fp
 8000a2e:	9102      	str	r1, [sp, #8]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	2101      	movs	r1, #1
 8000a32:	4099      	lsls	r1, r3
 8000a34:	4688      	mov	r8, r1
 8000a36:	4011      	ands	r1, r2
 8000a38:	9100      	str	r1, [sp, #0]
    if (iocurrent != 0x00u)
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	420a      	tst	r2, r1
 8000a3e:	d05e      	beq.n	8000afe <HAL_GPIO_Init+0xfa>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a40:	9c02      	ldr	r4, [sp, #8]
 8000a42:	005d      	lsls	r5, r3, #1
 8000a44:	6861      	ldr	r1, [r4, #4]
 8000a46:	468b      	mov	fp, r1
 8000a48:	2103      	movs	r1, #3
 8000a4a:	465c      	mov	r4, fp
 8000a4c:	4021      	ands	r1, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a4e:	2403      	movs	r4, #3
 8000a50:	40ac      	lsls	r4, r5
 8000a52:	43e4      	mvns	r4, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a54:	1e4e      	subs	r6, r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a56:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a58:	2e01      	cmp	r6, #1
 8000a5a:	d95b      	bls.n	8000b14 <HAL_GPIO_Init+0x110>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a5c:	2903      	cmp	r1, #3
 8000a5e:	d000      	beq.n	8000a62 <HAL_GPIO_Init+0x5e>
 8000a60:	e173      	b.n	8000d4a <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a62:	40a9      	lsls	r1, r5
      temp = GPIOx->MODER;
 8000a64:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a66:	9c01      	ldr	r4, [sp, #4]
 8000a68:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a6a:	4321      	orrs	r1, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a6c:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000a6e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a70:	4659      	mov	r1, fp
 8000a72:	02a4      	lsls	r4, r4, #10
 8000a74:	4221      	tst	r1, r4
 8000a76:	d042      	beq.n	8000afe <HAL_GPIO_Init+0xfa>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4661      	mov	r1, ip
 8000a7a:	2401      	movs	r4, #1
 8000a7c:	4665      	mov	r5, ip
 8000a7e:	6989      	ldr	r1, [r1, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a80:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4321      	orrs	r1, r4
 8000a84:	61a9      	str	r1, [r5, #24]
 8000a86:	69a9      	ldr	r1, [r5, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a88:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4021      	ands	r1, r4
 8000a8c:	4cc1      	ldr	r4, [pc, #772]	@ (8000d94 <HAL_GPIO_Init+0x390>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a8e:	401d      	ands	r5, r3
 8000a90:	46a0      	mov	r8, r4
 8000a92:	00ad      	lsls	r5, r5, #2
 8000a94:	40ae      	lsls	r6, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	9105      	str	r1, [sp, #20]
 8000a98:	9905      	ldr	r1, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a9a:	0899      	lsrs	r1, r3, #2
 8000a9c:	0089      	lsls	r1, r1, #2
 8000a9e:	4441      	add	r1, r8
 8000aa0:	688c      	ldr	r4, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000aa2:	43b4      	bics	r4, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000aa4:	4ebc      	ldr	r6, [pc, #752]	@ (8000d98 <HAL_GPIO_Init+0x394>)
 8000aa6:	42b0      	cmp	r0, r6
 8000aa8:	d100      	bne.n	8000aac <HAL_GPIO_Init+0xa8>
 8000aaa:	e08b      	b.n	8000bc4 <HAL_GPIO_Init+0x1c0>
 8000aac:	4ebb      	ldr	r6, [pc, #748]	@ (8000d9c <HAL_GPIO_Init+0x398>)
 8000aae:	42b0      	cmp	r0, r6
 8000ab0:	d100      	bne.n	8000ab4 <HAL_GPIO_Init+0xb0>
 8000ab2:	e075      	b.n	8000ba0 <HAL_GPIO_Init+0x19c>
 8000ab4:	4eba      	ldr	r6, [pc, #744]	@ (8000da0 <HAL_GPIO_Init+0x39c>)
 8000ab6:	42b0      	cmp	r0, r6
 8000ab8:	d100      	bne.n	8000abc <HAL_GPIO_Init+0xb8>
 8000aba:	e142      	b.n	8000d42 <HAL_GPIO_Init+0x33e>
 8000abc:	2605      	movs	r6, #5
 8000abe:	40ae      	lsls	r6, r5
 8000ac0:	4334      	orrs	r4, r6
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ac2:	2680      	movs	r6, #128	@ 0x80
 8000ac4:	465d      	mov	r5, fp
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac6:	608c      	str	r4, [r1, #8]
        temp &= ~(iocurrent);
 8000ac8:	9c00      	ldr	r4, [sp, #0]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aca:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8000acc:	43e4      	mvns	r4, r4
        temp = EXTI->RTSR;
 8000ace:	68b9      	ldr	r1, [r7, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ad0:	4235      	tst	r5, r6
 8000ad2:	d000      	beq.n	8000ad6 <HAL_GPIO_Init+0xd2>
 8000ad4:	e073      	b.n	8000bbe <HAL_GPIO_Init+0x1ba>
        temp &= ~(iocurrent);
 8000ad6:	4021      	ands	r1, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ad8:	465d      	mov	r5, fp
        EXTI->RTSR = temp;
 8000ada:	60b9      	str	r1, [r7, #8]
        temp = EXTI->FTSR;
 8000adc:	68f9      	ldr	r1, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ade:	02ad      	lsls	r5, r5, #10
 8000ae0:	d46a      	bmi.n	8000bb8 <HAL_GPIO_Init+0x1b4>
        temp &= ~(iocurrent);
 8000ae2:	4021      	ands	r1, r4
        EXTI->FTSR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae4:	465d      	mov	r5, fp
        EXTI->FTSR = temp;
 8000ae6:	60f9      	str	r1, [r7, #12]
        temp = EXTI->EMR;
 8000ae8:	6879      	ldr	r1, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aea:	03ad      	lsls	r5, r5, #14
 8000aec:	d461      	bmi.n	8000bb2 <HAL_GPIO_Init+0x1ae>
        temp &= ~(iocurrent);
 8000aee:	4021      	ands	r1, r4
        }
        EXTI->EMR = temp;

        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af0:	465d      	mov	r5, fp
        EXTI->EMR = temp;
 8000af2:	6079      	str	r1, [r7, #4]
        temp = EXTI->IMR;
 8000af4:	6839      	ldr	r1, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af6:	03ed      	lsls	r5, r5, #15
 8000af8:	d456      	bmi.n	8000ba8 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8000afa:	4021      	ands	r1, r4
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000afc:	6039      	str	r1, [r7, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afe:	0011      	movs	r1, r2
      }
    }

    position++;
 8000b00:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	40d9      	lsrs	r1, r3
 8000b04:	d194      	bne.n	8000a30 <HAL_GPIO_Init+0x2c>
  } 
}
 8000b06:	b007      	add	sp, #28
 8000b08:	bcf0      	pop	{r4, r5, r6, r7}
 8000b0a:	46bb      	mov	fp, r7
 8000b0c:	46b2      	mov	sl, r6
 8000b0e:	46a9      	mov	r9, r5
 8000b10:	46a0      	mov	r8, r4
 8000b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000b14:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b16:	4026      	ands	r6, r4
 8000b18:	46b2      	mov	sl, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b1a:	9e02      	ldr	r6, [sp, #8]
 8000b1c:	68f6      	ldr	r6, [r6, #12]
 8000b1e:	40ae      	lsls	r6, r5
 8000b20:	46b1      	mov	r9, r6
 8000b22:	4656      	mov	r6, sl
 8000b24:	464c      	mov	r4, r9
 8000b26:	4326      	orrs	r6, r4
        GPIOx->OSPEEDR = temp;
 8000b28:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b2a:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b2c:	0026      	movs	r6, r4
 8000b2e:	4644      	mov	r4, r8
 8000b30:	43a6      	bics	r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b32:	465c      	mov	r4, fp
 8000b34:	0924      	lsrs	r4, r4, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b36:	46b1      	mov	r9, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b38:	0026      	movs	r6, r4
 8000b3a:	2401      	movs	r4, #1
 8000b3c:	4026      	ands	r6, r4
 8000b3e:	409e      	lsls	r6, r3
 8000b40:	46b0      	mov	r8, r6
 8000b42:	464e      	mov	r6, r9
 8000b44:	4644      	mov	r4, r8
 8000b46:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8000b48:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000b4a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b4c:	0026      	movs	r6, r4
 8000b4e:	9c01      	ldr	r4, [sp, #4]
 8000b50:	4026      	ands	r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b52:	9c02      	ldr	r4, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b54:	46b1      	mov	r9, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b56:	68a4      	ldr	r4, [r4, #8]
 8000b58:	0026      	movs	r6, r4
 8000b5a:	40ae      	lsls	r6, r5
 8000b5c:	46b0      	mov	r8, r6
 8000b5e:	464e      	mov	r6, r9
 8000b60:	4644      	mov	r4, r8
 8000b62:	4326      	orrs	r6, r4
        GPIOx->PUPDR = temp;
 8000b64:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b66:	2902      	cmp	r1, #2
 8000b68:	d000      	beq.n	8000b6c <HAL_GPIO_Init+0x168>
 8000b6a:	e77a      	b.n	8000a62 <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3u];
 8000b6c:	08dc      	lsrs	r4, r3, #3
 8000b6e:	00a4      	lsls	r4, r4, #2
 8000b70:	46a0      	mov	r8, r4
 8000b72:	4480      	add	r8, r0
 8000b74:	4644      	mov	r4, r8
 8000b76:	6a26      	ldr	r6, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b78:	2407      	movs	r4, #7
 8000b7a:	401c      	ands	r4, r3
 8000b7c:	00a4      	lsls	r4, r4, #2
 8000b7e:	46a1      	mov	r9, r4
        temp = GPIOx->AFR[position >> 3u];
 8000b80:	9603      	str	r6, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b82:	240f      	movs	r4, #15
 8000b84:	464e      	mov	r6, r9
 8000b86:	40b4      	lsls	r4, r6
 8000b88:	9e03      	ldr	r6, [sp, #12]
 8000b8a:	43a6      	bics	r6, r4
 8000b8c:	9603      	str	r6, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b8e:	464e      	mov	r6, r9
 8000b90:	9c02      	ldr	r4, [sp, #8]
 8000b92:	6924      	ldr	r4, [r4, #16]
 8000b94:	40b4      	lsls	r4, r6
 8000b96:	9e03      	ldr	r6, [sp, #12]
 8000b98:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000b9a:	4644      	mov	r4, r8
 8000b9c:	6226      	str	r6, [r4, #32]
 8000b9e:	e760      	b.n	8000a62 <HAL_GPIO_Init+0x5e>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba0:	2602      	movs	r6, #2
 8000ba2:	40ae      	lsls	r6, r5
 8000ba4:	4334      	orrs	r4, r6
 8000ba6:	e78c      	b.n	8000ac2 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000ba8:	9c00      	ldr	r4, [sp, #0]
 8000baa:	430c      	orrs	r4, r1
 8000bac:	0021      	movs	r1, r4
        EXTI->IMR = temp;
 8000bae:	6039      	str	r1, [r7, #0]
 8000bb0:	e7a5      	b.n	8000afe <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 8000bb2:	9d00      	ldr	r5, [sp, #0]
 8000bb4:	4329      	orrs	r1, r5
 8000bb6:	e79b      	b.n	8000af0 <HAL_GPIO_Init+0xec>
          temp |= iocurrent;
 8000bb8:	9d00      	ldr	r5, [sp, #0]
 8000bba:	4329      	orrs	r1, r5
 8000bbc:	e792      	b.n	8000ae4 <HAL_GPIO_Init+0xe0>
          temp |= iocurrent;
 8000bbe:	9d00      	ldr	r5, [sp, #0]
 8000bc0:	4329      	orrs	r1, r5
 8000bc2:	e789      	b.n	8000ad8 <HAL_GPIO_Init+0xd4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc4:	2601      	movs	r6, #1
 8000bc6:	40ae      	lsls	r6, r5
 8000bc8:	4334      	orrs	r4, r6
 8000bca:	e77a      	b.n	8000ac2 <HAL_GPIO_Init+0xbe>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bcc:	496f      	ldr	r1, [pc, #444]	@ (8000d8c <HAL_GPIO_Init+0x388>)
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd0:	468a      	mov	sl, r1
        temp = EXTI->RTSR;
 8000bd2:	4659      	mov	r1, fp
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	2701      	movs	r7, #1
        temp = EXTI->RTSR;
 8000bd6:	9102      	str	r1, [sp, #8]
 8000bd8:	e048      	b.n	8000c6c <HAL_GPIO_Init+0x268>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bda:	2903      	cmp	r1, #3
 8000bdc:	d000      	beq.n	8000be0 <HAL_GPIO_Init+0x1dc>
 8000bde:	e0c1      	b.n	8000d64 <HAL_GPIO_Init+0x360>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be0:	40a9      	lsls	r1, r5
      temp = GPIOx->MODER;
 8000be2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000be4:	9c01      	ldr	r4, [sp, #4]
 8000be6:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000be8:	4321      	orrs	r1, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bea:	24c0      	movs	r4, #192	@ 0xc0
      GPIOx->MODER = temp;
 8000bec:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bee:	4659      	mov	r1, fp
 8000bf0:	02a4      	lsls	r4, r4, #10
 8000bf2:	4221      	tst	r1, r4
 8000bf4:	d035      	beq.n	8000c62 <HAL_GPIO_Init+0x25e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	4654      	mov	r4, sl
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfa:	2503      	movs	r5, #3
 8000bfc:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	6989      	ldr	r1, [r1, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c00:	401d      	ands	r5, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4339      	orrs	r1, r7
 8000c04:	61a1      	str	r1, [r4, #24]
 8000c06:	69a1      	ldr	r1, [r4, #24]
 8000c08:	4c62      	ldr	r4, [pc, #392]	@ (8000d94 <HAL_GPIO_Init+0x390>)
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0a:	00ad      	lsls	r5, r5, #2
 8000c0c:	46a4      	mov	ip, r4
 8000c0e:	40ae      	lsls	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c10:	465d      	mov	r5, fp
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4039      	ands	r1, r7
 8000c14:	9105      	str	r1, [sp, #20]
 8000c16:	9905      	ldr	r1, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000c18:	0899      	lsrs	r1, r3, #2
 8000c1a:	0089      	lsls	r1, r1, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	688c      	ldr	r4, [r1, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c20:	43b4      	bics	r4, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c22:	608c      	str	r4, [r1, #8]
        temp = EXTI->RTSR;
 8000c24:	495a      	ldr	r1, [pc, #360]	@ (8000d90 <HAL_GPIO_Init+0x38c>)
        temp &= ~(iocurrent);
 8000c26:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->RTSR;
 8000c28:	6889      	ldr	r1, [r1, #8]
        temp &= ~(iocurrent);
 8000c2a:	43e4      	mvns	r4, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c2c:	02ed      	lsls	r5, r5, #11
 8000c2e:	d500      	bpl.n	8000c32 <HAL_GPIO_Init+0x22e>
 8000c30:	e084      	b.n	8000d3c <HAL_GPIO_Init+0x338>
        temp &= ~(iocurrent);
 8000c32:	4021      	ands	r1, r4
        EXTI->RTSR = temp;
 8000c34:	4d56      	ldr	r5, [pc, #344]	@ (8000d90 <HAL_GPIO_Init+0x38c>)
 8000c36:	60a9      	str	r1, [r5, #8]
        temp = EXTI->FTSR;
 8000c38:	68e9      	ldr	r1, [r5, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c3a:	465d      	mov	r5, fp
 8000c3c:	02ad      	lsls	r5, r5, #10
 8000c3e:	d47a      	bmi.n	8000d36 <HAL_GPIO_Init+0x332>
        temp &= ~(iocurrent);
 8000c40:	4021      	ands	r1, r4
        EXTI->FTSR = temp;
 8000c42:	4d53      	ldr	r5, [pc, #332]	@ (8000d90 <HAL_GPIO_Init+0x38c>)
 8000c44:	60e9      	str	r1, [r5, #12]
        temp = EXTI->EMR;
 8000c46:	6869      	ldr	r1, [r5, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c48:	465d      	mov	r5, fp
 8000c4a:	03ad      	lsls	r5, r5, #14
 8000c4c:	d470      	bmi.n	8000d30 <HAL_GPIO_Init+0x32c>
        temp &= ~(iocurrent);
 8000c4e:	4021      	ands	r1, r4
        EXTI->EMR = temp;
 8000c50:	4d4f      	ldr	r5, [pc, #316]	@ (8000d90 <HAL_GPIO_Init+0x38c>)
 8000c52:	6069      	str	r1, [r5, #4]
        temp = EXTI->IMR;
 8000c54:	6829      	ldr	r1, [r5, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c56:	465d      	mov	r5, fp
 8000c58:	03ed      	lsls	r5, r5, #15
 8000c5a:	d465      	bmi.n	8000d28 <HAL_GPIO_Init+0x324>
        temp &= ~(iocurrent);
 8000c5c:	4021      	ands	r1, r4
        EXTI->IMR = temp;
 8000c5e:	4c4c      	ldr	r4, [pc, #304]	@ (8000d90 <HAL_GPIO_Init+0x38c>)
 8000c60:	6021      	str	r1, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c62:	0011      	movs	r1, r2
    position++;
 8000c64:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c66:	40d9      	lsrs	r1, r3
 8000c68:	d100      	bne.n	8000c6c <HAL_GPIO_Init+0x268>
 8000c6a:	e74c      	b.n	8000b06 <HAL_GPIO_Init+0x102>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	0039      	movs	r1, r7
 8000c6e:	4099      	lsls	r1, r3
 8000c70:	468c      	mov	ip, r1
 8000c72:	4011      	ands	r1, r2
 8000c74:	9100      	str	r1, [sp, #0]
    if (iocurrent != 0x00u)
 8000c76:	4661      	mov	r1, ip
 8000c78:	4211      	tst	r1, r2
 8000c7a:	d0f2      	beq.n	8000c62 <HAL_GPIO_Init+0x25e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c7c:	9902      	ldr	r1, [sp, #8]
 8000c7e:	005d      	lsls	r5, r3, #1
 8000c80:	6849      	ldr	r1, [r1, #4]
 8000c82:	468b      	mov	fp, r1
 8000c84:	2103      	movs	r1, #3
 8000c86:	465c      	mov	r4, fp
 8000c88:	4021      	ands	r1, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c8a:	2403      	movs	r4, #3
 8000c8c:	40ac      	lsls	r4, r5
 8000c8e:	43e4      	mvns	r4, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c90:	1e4e      	subs	r6, r1, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c92:	9401      	str	r4, [sp, #4]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c94:	2e01      	cmp	r6, #1
 8000c96:	d8a0      	bhi.n	8000bda <HAL_GPIO_Init+0x1d6>
        temp = GPIOx->OSPEEDR;
 8000c98:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c9a:	4026      	ands	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c9c:	9c02      	ldr	r4, [sp, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c9e:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca0:	68e6      	ldr	r6, [r4, #12]
 8000ca2:	40ae      	lsls	r6, r5
 8000ca4:	46b0      	mov	r8, r6
 8000ca6:	464e      	mov	r6, r9
 8000ca8:	4644      	mov	r4, r8
 8000caa:	4326      	orrs	r6, r4
        GPIOx->OSPEEDR = temp;
 8000cac:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000cae:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	0026      	movs	r6, r4
 8000cb2:	4664      	mov	r4, ip
 8000cb4:	43a6      	bics	r6, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb6:	465c      	mov	r4, fp
 8000cb8:	0924      	lsrs	r4, r4, #4
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cba:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cbc:	0026      	movs	r6, r4
 8000cbe:	403e      	ands	r6, r7
 8000cc0:	409e      	lsls	r6, r3
 8000cc2:	46b4      	mov	ip, r6
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	4664      	mov	r4, ip
 8000cc8:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8000cca:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000ccc:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cce:	0026      	movs	r6, r4
 8000cd0:	9c01      	ldr	r4, [sp, #4]
 8000cd2:	4026      	ands	r6, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cd4:	9c02      	ldr	r4, [sp, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cd6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cd8:	68a4      	ldr	r4, [r4, #8]
 8000cda:	0026      	movs	r6, r4
 8000cdc:	40ae      	lsls	r6, r5
 8000cde:	46b4      	mov	ip, r6
 8000ce0:	4646      	mov	r6, r8
 8000ce2:	4664      	mov	r4, ip
 8000ce4:	4326      	orrs	r6, r4
        GPIOx->PUPDR = temp;
 8000ce6:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce8:	2902      	cmp	r1, #2
 8000cea:	d000      	beq.n	8000cee <HAL_GPIO_Init+0x2ea>
 8000cec:	e778      	b.n	8000be0 <HAL_GPIO_Init+0x1dc>
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	08dc      	lsrs	r4, r3, #3
 8000cf0:	00a4      	lsls	r4, r4, #2
 8000cf2:	46a4      	mov	ip, r4
 8000cf4:	2490      	movs	r4, #144	@ 0x90
 8000cf6:	05e4      	lsls	r4, r4, #23
 8000cf8:	46a0      	mov	r8, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cfa:	44c4      	add	ip, r8
        temp = GPIOx->AFR[position >> 3u];
 8000cfc:	4664      	mov	r4, ip
 8000cfe:	6a26      	ldr	r6, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d00:	2407      	movs	r4, #7
 8000d02:	401c      	ands	r4, r3
 8000d04:	00a4      	lsls	r4, r4, #2
 8000d06:	46a1      	mov	r9, r4
        temp = GPIOx->AFR[position >> 3u];
 8000d08:	9603      	str	r6, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d0a:	240f      	movs	r4, #15
 8000d0c:	464e      	mov	r6, r9
 8000d0e:	40b4      	lsls	r4, r6
 8000d10:	9e03      	ldr	r6, [sp, #12]
 8000d12:	43a6      	bics	r6, r4
 8000d14:	9603      	str	r6, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d16:	464e      	mov	r6, r9
 8000d18:	9c02      	ldr	r4, [sp, #8]
 8000d1a:	6924      	ldr	r4, [r4, #16]
 8000d1c:	40b4      	lsls	r4, r6
 8000d1e:	9e03      	ldr	r6, [sp, #12]
 8000d20:	4326      	orrs	r6, r4
        GPIOx->AFR[position >> 3u] = temp;
 8000d22:	4664      	mov	r4, ip
 8000d24:	6226      	str	r6, [r4, #32]
 8000d26:	e75b      	b.n	8000be0 <HAL_GPIO_Init+0x1dc>
          temp |= iocurrent;
 8000d28:	9c00      	ldr	r4, [sp, #0]
 8000d2a:	430c      	orrs	r4, r1
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	e796      	b.n	8000c5e <HAL_GPIO_Init+0x25a>
          temp |= iocurrent;
 8000d30:	9d00      	ldr	r5, [sp, #0]
 8000d32:	4329      	orrs	r1, r5
 8000d34:	e78c      	b.n	8000c50 <HAL_GPIO_Init+0x24c>
          temp |= iocurrent;
 8000d36:	9d00      	ldr	r5, [sp, #0]
 8000d38:	4329      	orrs	r1, r5
 8000d3a:	e782      	b.n	8000c42 <HAL_GPIO_Init+0x23e>
          temp |= iocurrent;
 8000d3c:	9d00      	ldr	r5, [sp, #0]
 8000d3e:	4329      	orrs	r1, r5
 8000d40:	e778      	b.n	8000c34 <HAL_GPIO_Init+0x230>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d42:	2603      	movs	r6, #3
 8000d44:	40ae      	lsls	r6, r5
 8000d46:	4334      	orrs	r4, r6
 8000d48:	e6bb      	b.n	8000ac2 <HAL_GPIO_Init+0xbe>
 8000d4a:	0026      	movs	r6, r4
        temp = GPIOx->PUPDR;
 8000d4c:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d4e:	4034      	ands	r4, r6
 8000d50:	46a1      	mov	r9, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d52:	9c02      	ldr	r4, [sp, #8]
 8000d54:	68a4      	ldr	r4, [r4, #8]
 8000d56:	40ac      	lsls	r4, r5
 8000d58:	46a0      	mov	r8, r4
 8000d5a:	464c      	mov	r4, r9
 8000d5c:	4646      	mov	r6, r8
 8000d5e:	4334      	orrs	r4, r6
        GPIOx->PUPDR = temp;
 8000d60:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d62:	e67e      	b.n	8000a62 <HAL_GPIO_Init+0x5e>
 8000d64:	0026      	movs	r6, r4
        temp = GPIOx->PUPDR;
 8000d66:	2490      	movs	r4, #144	@ 0x90
 8000d68:	05e4      	lsls	r4, r4, #23
 8000d6a:	46a0      	mov	r8, r4
 8000d6c:	68e4      	ldr	r4, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d6e:	4034      	ands	r4, r6
 8000d70:	46a1      	mov	r9, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d72:	9c02      	ldr	r4, [sp, #8]
 8000d74:	68a4      	ldr	r4, [r4, #8]
 8000d76:	40ac      	lsls	r4, r5
 8000d78:	46a4      	mov	ip, r4
 8000d7a:	464c      	mov	r4, r9
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	4334      	orrs	r4, r6
 8000d80:	46a4      	mov	ip, r4
        GPIOx->PUPDR = temp;
 8000d82:	4644      	mov	r4, r8
 8000d84:	4666      	mov	r6, ip
 8000d86:	60e6      	str	r6, [r4, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	e72a      	b.n	8000be0 <HAL_GPIO_Init+0x1dc>
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	40010400 	.word	0x40010400
 8000d94:	40010000 	.word	0x40010000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	48000c00 	.word	0x48000c00

08000da4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	d001      	beq.n	8000dac <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da8:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000daa:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dac:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000dae:	e7fc      	b.n	8000daa <HAL_GPIO_WritePin+0x6>

08000db0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000db0:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000db2:	0013      	movs	r3, r2
 8000db4:	400b      	ands	r3, r1
 8000db6:	041b      	lsls	r3, r3, #16
 8000db8:	4391      	bics	r1, r2
 8000dba:	430b      	orrs	r3, r1
 8000dbc:	6183      	str	r3, [r0, #24]
}
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	46ce      	mov	lr, r9
 8000dc4:	4647      	mov	r7, r8
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	0004      	movs	r4, r0
 8000dca:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d100      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
 8000dd0:	e0f2      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	6803      	ldr	r3, [r0, #0]
 8000dd4:	07da      	lsls	r2, r3, #31
 8000dd6:	d535      	bpl.n	8000e44 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd8:	210c      	movs	r1, #12
 8000dda:	48c3      	ldr	r0, [pc, #780]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000ddc:	6842      	ldr	r2, [r0, #4]
 8000dde:	400a      	ands	r2, r1
 8000de0:	2a04      	cmp	r2, #4
 8000de2:	d100      	bne.n	8000de6 <HAL_RCC_OscConfig+0x26>
 8000de4:	e101      	b.n	8000fea <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de6:	6842      	ldr	r2, [r0, #4]
 8000de8:	4011      	ands	r1, r2
 8000dea:	2908      	cmp	r1, #8
 8000dec:	d100      	bne.n	8000df0 <HAL_RCC_OscConfig+0x30>
 8000dee:	e0f8      	b.n	8000fe2 <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df0:	6863      	ldr	r3, [r4, #4]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d00f      	beq.n	8000e16 <HAL_RCC_OscConfig+0x56>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d100      	bne.n	8000dfc <HAL_RCC_OscConfig+0x3c>
 8000dfa:	e11e      	b.n	800103a <HAL_RCC_OscConfig+0x27a>
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	d100      	bne.n	8000e02 <HAL_RCC_OscConfig+0x42>
 8000e00:	e1a7      	b.n	8001152 <HAL_RCC_OscConfig+0x392>
 8000e02:	4bb9      	ldr	r3, [pc, #740]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000e04:	49b9      	ldr	r1, [pc, #740]	@ (80010ec <HAL_RCC_OscConfig+0x32c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	400a      	ands	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	49b8      	ldr	r1, [pc, #736]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
 8000e10:	400a      	ands	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e14:	e005      	b.n	8000e22 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	4ab3      	ldr	r2, [pc, #716]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000e1a:	025b      	lsls	r3, r3, #9
 8000e1c:	6811      	ldr	r1, [r2, #0]
 8000e1e:	430b      	orrs	r3, r1
 8000e20:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fd99 	bl	8000958 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8000e28:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e2a:	4faf      	ldr	r7, [pc, #700]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000e2c:	02b6      	lsls	r6, r6, #10
 8000e2e:	e005      	b.n	8000e3c <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e30:	f7ff fd92 	bl	8000958 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	2864      	cmp	r0, #100	@ 0x64
 8000e38:	d900      	bls.n	8000e3c <HAL_RCC_OscConfig+0x7c>
 8000e3a:	e0fc      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	4233      	tst	r3, r6
 8000e40:	d0f6      	beq.n	8000e30 <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	079a      	lsls	r2, r3, #30
 8000e46:	d529      	bpl.n	8000e9c <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e48:	220c      	movs	r2, #12
 8000e4a:	49a7      	ldr	r1, [pc, #668]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000e4c:	6848      	ldr	r0, [r1, #4]
 8000e4e:	4202      	tst	r2, r0
 8000e50:	d100      	bne.n	8000e54 <HAL_RCC_OscConfig+0x94>
 8000e52:	e0aa      	b.n	8000faa <HAL_RCC_OscConfig+0x1ea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e54:	6848      	ldr	r0, [r1, #4]
 8000e56:	4002      	ands	r2, r0
 8000e58:	2a08      	cmp	r2, #8
 8000e5a:	d100      	bne.n	8000e5e <HAL_RCC_OscConfig+0x9e>
 8000e5c:	e0a1      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5e:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e60:	4da1      	ldr	r5, [pc, #644]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d100      	bne.n	8000e68 <HAL_RCC_OscConfig+0xa8>
 8000e66:	e11f      	b.n	80010a8 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 8000e68:	2201      	movs	r2, #1
 8000e6a:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e6c:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e72:	f7ff fd71 	bl	8000958 <HAL_GetTick>
 8000e76:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e78:	e005      	b.n	8000e86 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e7a:	f7ff fd6d 	bl	8000958 <HAL_GetTick>
 8000e7e:	1b80      	subs	r0, r0, r6
 8000e80:	2802      	cmp	r0, #2
 8000e82:	d900      	bls.n	8000e86 <HAL_RCC_OscConfig+0xc6>
 8000e84:	e0d7      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e86:	682b      	ldr	r3, [r5, #0]
 8000e88:	421f      	tst	r7, r3
 8000e8a:	d0f6      	beq.n	8000e7a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8c:	21f8      	movs	r1, #248	@ 0xf8
 8000e8e:	682a      	ldr	r2, [r5, #0]
 8000e90:	6923      	ldr	r3, [r4, #16]
 8000e92:	438a      	bics	r2, r1
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4313      	orrs	r3, r2
 8000e98:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	071a      	lsls	r2, r3, #28
 8000e9e:	d42d      	bmi.n	8000efc <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea0:	075a      	lsls	r2, r3, #29
 8000ea2:	d544      	bpl.n	8000f2e <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea4:	2280      	movs	r2, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000ea6:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000eaa:	0552      	lsls	r2, r2, #21
 8000eac:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000eae:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb0:	4211      	tst	r1, r2
 8000eb2:	d108      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eb4:	69d9      	ldr	r1, [r3, #28]
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	61d9      	str	r1, [r3, #28]
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	9301      	str	r3, [sp, #4]
 8000ec0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	2780      	movs	r7, #128	@ 0x80
 8000ec8:	4e8a      	ldr	r6, [pc, #552]	@ (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000eca:	007f      	lsls	r7, r7, #1
 8000ecc:	6833      	ldr	r3, [r6, #0]
 8000ece:	423b      	tst	r3, r7
 8000ed0:	d100      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x114>
 8000ed2:	e094      	b.n	8000ffe <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed4:	68a3      	ldr	r3, [r4, #8]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d100      	bne.n	8000edc <HAL_RCC_OscConfig+0x11c>
 8000eda:	e0f8      	b.n	80010ce <HAL_RCC_OscConfig+0x30e>
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d100      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x122>
 8000ee0:	e0c4      	b.n	800106c <HAL_RCC_OscConfig+0x2ac>
 8000ee2:	2b05      	cmp	r3, #5
 8000ee4:	d100      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x128>
 8000ee6:	e140      	b.n	800116a <HAL_RCC_OscConfig+0x3aa>
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4b7f      	ldr	r3, [pc, #508]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000eec:	6a1a      	ldr	r2, [r3, #32]
 8000eee:	438a      	bics	r2, r1
 8000ef0:	621a      	str	r2, [r3, #32]
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	3103      	adds	r1, #3
 8000ef6:	438a      	bics	r2, r1
 8000ef8:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efa:	e0ec      	b.n	80010d6 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efc:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4d7a      	ldr	r5, [pc, #488]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d05b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8000f04:	2201      	movs	r2, #1
 8000f06:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f08:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fd23 	bl	8000958 <HAL_GetTick>
 8000f12:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f14:	e005      	b.n	8000f22 <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f16:	f7ff fd1f 	bl	8000958 <HAL_GetTick>
 8000f1a:	1b80      	subs	r0, r0, r6
 8000f1c:	2802      	cmp	r0, #2
 8000f1e:	d900      	bls.n	8000f22 <HAL_RCC_OscConfig+0x162>
 8000f20:	e089      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f22:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000f24:	421f      	tst	r7, r3
 8000f26:	d0f6      	beq.n	8000f16 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	075a      	lsls	r2, r3, #29
 8000f2c:	d4ba      	bmi.n	8000ea4 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000f2e:	06db      	lsls	r3, r3, #27
 8000f30:	d512      	bpl.n	8000f58 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000f32:	6963      	ldr	r3, [r4, #20]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d100      	bne.n	8000f3a <HAL_RCC_OscConfig+0x17a>
 8000f38:	e13c      	b.n	80011b4 <HAL_RCC_OscConfig+0x3f4>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f3a:	3305      	adds	r3, #5
 8000f3c:	d000      	beq.n	8000f40 <HAL_RCC_OscConfig+0x180>
 8000f3e:	e0e9      	b.n	8001114 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f40:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f42:	20f8      	movs	r0, #248	@ 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f44:	4a68      	ldr	r2, [pc, #416]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000f46:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000f48:	438b      	bics	r3, r1
 8000f4a:	6353      	str	r3, [r2, #52]	@ 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f4c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000f4e:	69a3      	ldr	r3, [r4, #24]
 8000f50:	4381      	bics	r1, r0
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6353      	str	r3, [r2, #52]	@ 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f58:	6a23      	ldr	r3, [r4, #32]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d01b      	beq.n	8000f96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	4d61      	ldr	r5, [pc, #388]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000f62:	6869      	ldr	r1, [r5, #4]
 8000f64:	400a      	ands	r2, r1
 8000f66:	2a08      	cmp	r2, #8
 8000f68:	d100      	bne.n	8000f6c <HAL_RCC_OscConfig+0x1ac>
 8000f6a:	e108      	b.n	800117e <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d100      	bne.n	8000f72 <HAL_RCC_OscConfig+0x1b2>
 8000f70:	e13e      	b.n	80011f0 <HAL_RCC_OscConfig+0x430>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	4a60      	ldr	r2, [pc, #384]	@ (80010f8 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f76:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8000f78:	4013      	ands	r3, r2
 8000f7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f7c:	f7ff fcec 	bl	8000958 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f80:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8000f82:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f84:	e004      	b.n	8000f90 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f86:	f7ff fce7 	bl	8000958 <HAL_GetTick>
 8000f8a:	1b00      	subs	r0, r0, r4
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d852      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f90:	682b      	ldr	r3, [r5, #0]
 8000f92:	4233      	tst	r3, r6
 8000f94:	d1f7      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 8000f96:	2000      	movs	r0, #0
}
 8000f98:	b003      	add	sp, #12
 8000f9a:	bcc0      	pop	{r6, r7}
 8000f9c:	46b9      	mov	r9, r7
 8000f9e:	46b0      	mov	r8, r6
 8000fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa2:	684a      	ldr	r2, [r1, #4]
 8000fa4:	03d2      	lsls	r2, r2, #15
 8000fa6:	d500      	bpl.n	8000faa <HAL_RCC_OscConfig+0x1ea>
 8000fa8:	e759      	b.n	8000e5e <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000faa:	4a4f      	ldr	r2, [pc, #316]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	0792      	lsls	r2, r2, #30
 8000fb0:	d535      	bpl.n	800101e <HAL_RCC_OscConfig+0x25e>
 8000fb2:	68e2      	ldr	r2, [r4, #12]
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d032      	beq.n	800101e <HAL_RCC_OscConfig+0x25e>
    return HAL_ERROR;
 8000fb8:	2001      	movs	r0, #1
 8000fba:	e7ed      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_LSI_DISABLE();
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc0:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8000fc2:	4393      	bics	r3, r2
 8000fc4:	626b      	str	r3, [r5, #36]	@ 0x24
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fcc7 	bl	8000958 <HAL_GetTick>
 8000fca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fcc:	e004      	b.n	8000fd8 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fce:	f7ff fcc3 	bl	8000958 <HAL_GetTick>
 8000fd2:	1b80      	subs	r0, r0, r6
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d82e      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8000fda:	421f      	tst	r7, r3
 8000fdc:	d1f7      	bne.n	8000fce <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	e7a3      	b.n	8000f2a <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe2:	6842      	ldr	r2, [r0, #4]
 8000fe4:	03d2      	lsls	r2, r2, #15
 8000fe6:	d400      	bmi.n	8000fea <HAL_RCC_OscConfig+0x22a>
 8000fe8:	e702      	b.n	8000df0 <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fea:	4a3f      	ldr	r2, [pc, #252]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8000fec:	6812      	ldr	r2, [r2, #0]
 8000fee:	0392      	lsls	r2, r2, #14
 8000ff0:	d400      	bmi.n	8000ff4 <HAL_RCC_OscConfig+0x234>
 8000ff2:	e727      	b.n	8000e44 <HAL_RCC_OscConfig+0x84>
 8000ff4:	6862      	ldr	r2, [r4, #4]
 8000ff6:	2a00      	cmp	r2, #0
 8000ff8:	d000      	beq.n	8000ffc <HAL_RCC_OscConfig+0x23c>
 8000ffa:	e723      	b.n	8000e44 <HAL_RCC_OscConfig+0x84>
 8000ffc:	e7dc      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ffe:	6833      	ldr	r3, [r6, #0]
 8001000:	433b      	orrs	r3, r7
 8001002:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001004:	f7ff fca8 	bl	8000958 <HAL_GetTick>
 8001008:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100a:	e004      	b.n	8001016 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800100c:	f7ff fca4 	bl	8000958 <HAL_GetTick>
 8001010:	1b40      	subs	r0, r0, r5
 8001012:	2864      	cmp	r0, #100	@ 0x64
 8001014:	d80f      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001016:	6833      	ldr	r3, [r6, #0]
 8001018:	423b      	tst	r3, r7
 800101a:	d0f7      	beq.n	800100c <HAL_RCC_OscConfig+0x24c>
 800101c:	e75a      	b.n	8000ed4 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	25f8      	movs	r5, #248	@ 0xf8
 8001020:	4831      	ldr	r0, [pc, #196]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 8001022:	6922      	ldr	r2, [r4, #16]
 8001024:	6801      	ldr	r1, [r0, #0]
 8001026:	00d2      	lsls	r2, r2, #3
 8001028:	43a9      	bics	r1, r5
 800102a:	430a      	orrs	r2, r1
 800102c:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800102e:	071a      	lsls	r2, r3, #28
 8001030:	d400      	bmi.n	8001034 <HAL_RCC_OscConfig+0x274>
 8001032:	e735      	b.n	8000ea0 <HAL_RCC_OscConfig+0xe0>
 8001034:	e762      	b.n	8000efc <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8001036:	2003      	movs	r0, #3
 8001038:	e7ae      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103a:	4d2b      	ldr	r5, [pc, #172]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 800103c:	4a2b      	ldr	r2, [pc, #172]	@ (80010ec <HAL_RCC_OscConfig+0x32c>)
 800103e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001040:	2780      	movs	r7, #128	@ 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001042:	4013      	ands	r3, r2
 8001044:	602b      	str	r3, [r5, #0]
 8001046:	682b      	ldr	r3, [r5, #0]
 8001048:	4a29      	ldr	r2, [pc, #164]	@ (80010f0 <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	4013      	ands	r3, r2
 800104e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001050:	f7ff fc82 	bl	8000958 <HAL_GetTick>
 8001054:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001056:	e004      	b.n	8001062 <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001058:	f7ff fc7e 	bl	8000958 <HAL_GetTick>
 800105c:	1b80      	subs	r0, r0, r6
 800105e:	2864      	cmp	r0, #100	@ 0x64
 8001060:	d8e9      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	682b      	ldr	r3, [r5, #0]
 8001064:	423b      	tst	r3, r7
 8001066:	d1f7      	bne.n	8001058 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	e6eb      	b.n	8000e44 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	2201      	movs	r2, #1
 800106e:	4e1e      	ldr	r6, [pc, #120]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001070:	4d22      	ldr	r5, [pc, #136]	@ (80010fc <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001072:	6a33      	ldr	r3, [r6, #32]
 8001074:	4393      	bics	r3, r2
 8001076:	6233      	str	r3, [r6, #32]
 8001078:	6a33      	ldr	r3, [r6, #32]
 800107a:	3203      	adds	r2, #3
 800107c:	4393      	bics	r3, r2
 800107e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001080:	f7ff fc6a 	bl	8000958 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001086:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001088:	4698      	mov	r8, r3
 800108a:	e004      	b.n	8001096 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800108c:	f7ff fc64 	bl	8000958 <HAL_GetTick>
 8001090:	1bc0      	subs	r0, r0, r7
 8001092:	42a8      	cmp	r0, r5
 8001094:	d8cf      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001096:	4642      	mov	r2, r8
 8001098:	6a33      	ldr	r3, [r6, #32]
 800109a:	421a      	tst	r2, r3
 800109c:	d1f6      	bne.n	800108c <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 800109e:	464b      	mov	r3, r9
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d04f      	beq.n	8001144 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	e742      	b.n	8000f2e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80010a8:	2201      	movs	r2, #1
 80010aa:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ac:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80010ae:	4393      	bics	r3, r2
 80010b0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff fc51 	bl	8000958 <HAL_GetTick>
 80010b6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b8:	e004      	b.n	80010c4 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fc4d 	bl	8000958 <HAL_GetTick>
 80010be:	1b80      	subs	r0, r0, r6
 80010c0:	2802      	cmp	r0, #2
 80010c2:	d8b8      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	421f      	tst	r7, r3
 80010c8:	d1f7      	bne.n	80010ba <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	e6e6      	b.n	8000e9c <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ce:	4906      	ldr	r1, [pc, #24]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
 80010d0:	6a0a      	ldr	r2, [r1, #32]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 80010d6:	f7ff fc3f 	bl	8000958 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010da:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 80010dc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010de:	4698      	mov	r8, r3
 80010e0:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	4d06      	ldr	r5, [pc, #24]	@ (80010fc <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	e011      	b.n	800110a <HAL_RCC_OscConfig+0x34a>
 80010e6:	46c0      	nop			@ (mov r8, r8)
 80010e8:	40021000 	.word	0x40021000
 80010ec:	fffeffff 	.word	0xfffeffff
 80010f0:	fffbffff 	.word	0xfffbffff
 80010f4:	40007000 	.word	0x40007000
 80010f8:	feffffff 	.word	0xfeffffff
 80010fc:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001100:	f7ff fc2a 	bl	8000958 <HAL_GetTick>
 8001104:	1b80      	subs	r0, r0, r6
 8001106:	42a8      	cmp	r0, r5
 8001108:	d895      	bhi.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800110a:	4643      	mov	r3, r8
 800110c:	6a1b      	ldr	r3, [r3, #32]
 800110e:	421f      	tst	r7, r3
 8001110:	d0f6      	beq.n	8001100 <HAL_RCC_OscConfig+0x340>
 8001112:	e7c4      	b.n	800109e <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001114:	2204      	movs	r2, #4
 8001116:	4d52      	ldr	r5, [pc, #328]	@ (8001260 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001118:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800111a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800111c:	4313      	orrs	r3, r2
 800111e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001120:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8001122:	3a03      	subs	r2, #3
 8001124:	4393      	bics	r3, r2
 8001126:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8001128:	f7ff fc16 	bl	8000958 <HAL_GetTick>
 800112c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800112e:	e005      	b.n	800113c <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001130:	f7ff fc12 	bl	8000958 <HAL_GetTick>
 8001134:	1b80      	subs	r0, r0, r6
 8001136:	2802      	cmp	r0, #2
 8001138:	d900      	bls.n	800113c <HAL_RCC_OscConfig+0x37c>
 800113a:	e77c      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800113c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800113e:	421f      	tst	r7, r3
 8001140:	d1f6      	bne.n	8001130 <HAL_RCC_OscConfig+0x370>
 8001142:	e709      	b.n	8000f58 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001144:	4a46      	ldr	r2, [pc, #280]	@ (8001260 <HAL_RCC_OscConfig+0x4a0>)
 8001146:	4947      	ldr	r1, [pc, #284]	@ (8001264 <HAL_RCC_OscConfig+0x4a4>)
 8001148:	69d3      	ldr	r3, [r2, #28]
 800114a:	400b      	ands	r3, r1
 800114c:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	e6ed      	b.n	8000f2e <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	4b42      	ldr	r3, [pc, #264]	@ (8001260 <HAL_RCC_OscConfig+0x4a0>)
 8001156:	02d2      	lsls	r2, r2, #11
 8001158:	6819      	ldr	r1, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	0252      	lsls	r2, r2, #9
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001168:	e65b      	b.n	8000e22 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116a:	2104      	movs	r1, #4
 800116c:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <HAL_RCC_OscConfig+0x4a0>)
 800116e:	6a1a      	ldr	r2, [r3, #32]
 8001170:	430a      	orrs	r2, r1
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	6a1a      	ldr	r2, [r3, #32]
 8001176:	3903      	subs	r1, #3
 8001178:	430a      	orrs	r2, r1
 800117a:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800117c:	e7ab      	b.n	80010d6 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800117e:	2b01      	cmp	r3, #1
 8001180:	d100      	bne.n	8001184 <HAL_RCC_OscConfig+0x3c4>
 8001182:	e719      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1f8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001184:	2280      	movs	r2, #128	@ 0x80
        pll_config  = RCC->CFGR;
 8001186:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001188:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800118a:	0252      	lsls	r2, r2, #9
        pll_config2 = RCC->CFGR2;
 800118c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800118e:	401a      	ands	r2, r3
 8001190:	428a      	cmp	r2, r1
 8001192:	d000      	beq.n	8001196 <HAL_RCC_OscConfig+0x3d6>
 8001194:	e710      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001196:	220f      	movs	r2, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001198:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800119a:	4002      	ands	r2, r0
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800119c:	428a      	cmp	r2, r1
 800119e:	d000      	beq.n	80011a2 <HAL_RCC_OscConfig+0x3e2>
 80011a0:	e70a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x1f8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011a2:	22f0      	movs	r2, #240	@ 0xf0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011a4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011a6:	0392      	lsls	r2, r2, #14
 80011a8:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011aa:	1a18      	subs	r0, r3, r0
 80011ac:	1e43      	subs	r3, r0, #1
 80011ae:	4198      	sbcs	r0, r3
 80011b0:	b2c0      	uxtb	r0, r0
 80011b2:	e6f1      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSI14ADC_DISABLE();
 80011b4:	2104      	movs	r1, #4
 80011b6:	4d2a      	ldr	r5, [pc, #168]	@ (8001260 <HAL_RCC_OscConfig+0x4a0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011b8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80011ba:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80011bc:	430a      	orrs	r2, r1
 80011be:	636a      	str	r2, [r5, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 80011c0:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80011c2:	4313      	orrs	r3, r2
 80011c4:	636b      	str	r3, [r5, #52]	@ 0x34
      tickstart = HAL_GetTick();
 80011c6:	f7ff fbc7 	bl	8000958 <HAL_GetTick>
 80011ca:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011cc:	e005      	b.n	80011da <HAL_RCC_OscConfig+0x41a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011ce:	f7ff fbc3 	bl	8000958 <HAL_GetTick>
 80011d2:	1b80      	subs	r0, r0, r6
 80011d4:	2802      	cmp	r0, #2
 80011d6:	d900      	bls.n	80011da <HAL_RCC_OscConfig+0x41a>
 80011d8:	e72d      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011da:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80011dc:	421f      	tst	r7, r3
 80011de:	d0f6      	beq.n	80011ce <HAL_RCC_OscConfig+0x40e>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011e0:	21f8      	movs	r1, #248	@ 0xf8
 80011e2:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 80011e4:	69a3      	ldr	r3, [r4, #24]
 80011e6:	438a      	bics	r2, r1
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	636b      	str	r3, [r5, #52]	@ 0x34
 80011ee:	e6b3      	b.n	8000f58 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 80011f0:	682b      	ldr	r3, [r5, #0]
 80011f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_RCC_OscConfig+0x4a8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4013      	ands	r3, r2
 80011f8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011fa:	f7ff fbad 	bl	8000958 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fe:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001200:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	e005      	b.n	8001210 <HAL_RCC_OscConfig+0x450>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fba8 	bl	8000958 <HAL_GetTick>
 8001208:	1b80      	subs	r0, r0, r6
 800120a:	2802      	cmp	r0, #2
 800120c:	d900      	bls.n	8001210 <HAL_RCC_OscConfig+0x450>
 800120e:	e712      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	423b      	tst	r3, r7
 8001214:	d1f6      	bne.n	8001204 <HAL_RCC_OscConfig+0x444>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001216:	220f      	movs	r2, #15
 8001218:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800121a:	4e11      	ldr	r6, [pc, #68]	@ (8001260 <HAL_RCC_OscConfig+0x4a0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800121c:	4393      	bics	r3, r2
 800121e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001220:	4313      	orrs	r3, r2
 8001222:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8001224:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001226:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001228:	686a      	ldr	r2, [r5, #4]
 800122a:	430b      	orrs	r3, r1
 800122c:	490f      	ldr	r1, [pc, #60]	@ (800126c <HAL_RCC_OscConfig+0x4ac>)
 800122e:	400a      	ands	r2, r1
 8001230:	4313      	orrs	r3, r2
 8001232:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	682a      	ldr	r2, [r5, #0]
 8001238:	045b      	lsls	r3, r3, #17
 800123a:	4313      	orrs	r3, r2
 800123c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800123e:	f7ff fb8b 	bl	8000958 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001242:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001244:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001246:	04ad      	lsls	r5, r5, #18
 8001248:	e005      	b.n	8001256 <HAL_RCC_OscConfig+0x496>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800124a:	f7ff fb85 	bl	8000958 <HAL_GetTick>
 800124e:	1b00      	subs	r0, r0, r4
 8001250:	2802      	cmp	r0, #2
 8001252:	d900      	bls.n	8001256 <HAL_RCC_OscConfig+0x496>
 8001254:	e6ef      	b.n	8001036 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001256:	6833      	ldr	r3, [r6, #0]
 8001258:	422b      	tst	r3, r5
 800125a:	d0f6      	beq.n	800124a <HAL_RCC_OscConfig+0x48a>
 800125c:	e69b      	b.n	8000f96 <HAL_RCC_OscConfig+0x1d6>
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40021000 	.word	0x40021000
 8001264:	efffffff 	.word	0xefffffff
 8001268:	feffffff 	.word	0xfeffffff
 800126c:	ffc2ffff 	.word	0xffc2ffff

08001270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001272:	46ce      	mov	lr, r9
 8001274:	4647      	mov	r7, r8
 8001276:	0004      	movs	r4, r0
 8001278:	000d      	movs	r5, r1
 800127a:	b580      	push	{r7, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800127c:	2800      	cmp	r0, #0
 800127e:	d00d      	beq.n	800129c <HAL_RCC_ClockConfig+0x2c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001280:	2301      	movs	r3, #1
 8001282:	494a      	ldr	r1, [pc, #296]	@ (80013ac <HAL_RCC_ClockConfig+0x13c>)
 8001284:	680a      	ldr	r2, [r1, #0]
 8001286:	401a      	ands	r2, r3
 8001288:	42aa      	cmp	r2, r5
 800128a:	d20c      	bcs.n	80012a6 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800128c:	680a      	ldr	r2, [r1, #0]
 800128e:	439a      	bics	r2, r3
 8001290:	432a      	orrs	r2, r5
 8001292:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001294:	680a      	ldr	r2, [r1, #0]
 8001296:	4013      	ands	r3, r2
 8001298:	42ab      	cmp	r3, r5
 800129a:	d004      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x36>
    return HAL_ERROR;
 800129c:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 800129e:	bcc0      	pop	{r6, r7}
 80012a0:	46b9      	mov	r9, r7
 80012a2:	46b0      	mov	r8, r6
 80012a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012a6:	6823      	ldr	r3, [r4, #0]
 80012a8:	079a      	lsls	r2, r3, #30
 80012aa:	d50e      	bpl.n	80012ca <HAL_RCC_ClockConfig+0x5a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ac:	075a      	lsls	r2, r3, #29
 80012ae:	d505      	bpl.n	80012bc <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012b0:	22e0      	movs	r2, #224	@ 0xe0
 80012b2:	493f      	ldr	r1, [pc, #252]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
 80012b4:	00d2      	lsls	r2, r2, #3
 80012b6:	6848      	ldr	r0, [r1, #4]
 80012b8:	4302      	orrs	r2, r0
 80012ba:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012bc:	20f0      	movs	r0, #240	@ 0xf0
 80012be:	493c      	ldr	r1, [pc, #240]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
 80012c0:	684a      	ldr	r2, [r1, #4]
 80012c2:	4382      	bics	r2, r0
 80012c4:	68a0      	ldr	r0, [r4, #8]
 80012c6:	4302      	orrs	r2, r0
 80012c8:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ca:	07db      	lsls	r3, r3, #31
 80012cc:	d522      	bpl.n	8001314 <HAL_RCC_ClockConfig+0xa4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ce:	4b38      	ldr	r3, [pc, #224]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d0:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012d4:	2a01      	cmp	r2, #1
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012d8:	2a02      	cmp	r2, #2
 80012da:	d056      	beq.n	800138a <HAL_RCC_ClockConfig+0x11a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012dc:	079b      	lsls	r3, r3, #30
 80012de:	d5dd      	bpl.n	800129c <HAL_RCC_ClockConfig+0x2c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e0:	2103      	movs	r1, #3
 80012e2:	4e33      	ldr	r6, [pc, #204]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
 80012e4:	6873      	ldr	r3, [r6, #4]
 80012e6:	438b      	bics	r3, r1
 80012e8:	4313      	orrs	r3, r2
 80012ea:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80012ec:	f7ff fb34 	bl	8000958 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f0:	230c      	movs	r3, #12
 80012f2:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_RCC_ClockConfig+0x144>)
    tickstart = HAL_GetTick();
 80012f6:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f8:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	e004      	b.n	8001306 <HAL_RCC_ClockConfig+0x96>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012fc:	f7ff fb2c 	bl	8000958 <HAL_GetTick>
 8001300:	1bc0      	subs	r0, r0, r7
 8001302:	4548      	cmp	r0, r9
 8001304:	d847      	bhi.n	8001396 <HAL_RCC_ClockConfig+0x126>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001306:	4643      	mov	r3, r8
 8001308:	6872      	ldr	r2, [r6, #4]
 800130a:	401a      	ands	r2, r3
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	429a      	cmp	r2, r3
 8001312:	d1f3      	bne.n	80012fc <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001314:	2101      	movs	r1, #1
 8001316:	4a25      	ldr	r2, [pc, #148]	@ (80013ac <HAL_RCC_ClockConfig+0x13c>)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	400b      	ands	r3, r1
 800131c:	42ab      	cmp	r3, r5
 800131e:	d905      	bls.n	800132c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001320:	6813      	ldr	r3, [r2, #0]
 8001322:	438b      	bics	r3, r1
 8001324:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	4219      	tst	r1, r3
 800132a:	d1b7      	bne.n	800129c <HAL_RCC_ClockConfig+0x2c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	6823      	ldr	r3, [r4, #0]
 800132e:	075b      	lsls	r3, r3, #29
 8001330:	d506      	bpl.n	8001340 <HAL_RCC_ClockConfig+0xd0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001332:	4a1f      	ldr	r2, [pc, #124]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
 8001334:	4920      	ldr	r1, [pc, #128]	@ (80013b8 <HAL_RCC_ClockConfig+0x148>)
 8001336:	6853      	ldr	r3, [r2, #4]
 8001338:	400b      	ands	r3, r1
 800133a:	68e1      	ldr	r1, [r4, #12]
 800133c:	430b      	orrs	r3, r1
 800133e:	6053      	str	r3, [r2, #4]
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001340:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001342:	491b      	ldr	r1, [pc, #108]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
 8001344:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001346:	4013      	ands	r3, r2
 8001348:	2b08      	cmp	r3, #8
 800134a:	d00e      	beq.n	800136a <HAL_RCC_ClockConfig+0xfa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800134c:	481b      	ldr	r0, [pc, #108]	@ (80013bc <HAL_RCC_ClockConfig+0x14c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_RCC_ClockConfig+0x140>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	@ (80013c0 <HAL_RCC_ClockConfig+0x150>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	491b      	ldr	r1, [pc, #108]	@ (80013c4 <HAL_RCC_ClockConfig+0x154>)
 8001356:	061b      	lsls	r3, r3, #24
 8001358:	0f1b      	lsrs	r3, r3, #28
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	40d8      	lsrs	r0, r3
 800135e:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fab7 	bl	80008d4 <HAL_InitTick>
  return HAL_OK;
 8001366:	2000      	movs	r0, #0
 8001368:	e799      	b.n	800129e <HAL_RCC_ClockConfig+0x2e>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800136a:	250f      	movs	r5, #15
 800136c:	4816      	ldr	r0, [pc, #88]	@ (80013c8 <HAL_RCC_ClockConfig+0x158>)
 800136e:	0c93      	lsrs	r3, r2, #18
 8001370:	402b      	ands	r3, r5
 8001372:	5cc4      	ldrb	r4, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001374:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001376:	03d2      	lsls	r2, r2, #15
 8001378:	d50f      	bpl.n	800139a <HAL_RCC_ClockConfig+0x12a>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_RCC_ClockConfig+0x15c>)
 800137c:	400d      	ands	r5, r1
 800137e:	5d59      	ldrb	r1, [r3, r5]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001380:	480e      	ldr	r0, [pc, #56]	@ (80013bc <HAL_RCC_ClockConfig+0x14c>)
 8001382:	f7fe fec1 	bl	8000108 <__udivsi3>
 8001386:	4360      	muls	r0, r4
 8001388:	e7e1      	b.n	800134e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138a:	019b      	lsls	r3, r3, #6
 800138c:	d4a8      	bmi.n	80012e0 <HAL_RCC_ClockConfig+0x70>
 800138e:	e785      	b.n	800129c <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001390:	039b      	lsls	r3, r3, #14
 8001392:	d4a5      	bmi.n	80012e0 <HAL_RCC_ClockConfig+0x70>
 8001394:	e782      	b.n	800129c <HAL_RCC_ClockConfig+0x2c>
        return HAL_TIMEOUT;
 8001396:	2003      	movs	r0, #3
 8001398:	e781      	b.n	800129e <HAL_RCC_ClockConfig+0x2e>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800139a:	0163      	lsls	r3, r4, #5
 800139c:	1b1b      	subs	r3, r3, r4
 800139e:	0198      	lsls	r0, r3, #6
 80013a0:	1ac0      	subs	r0, r0, r3
 80013a2:	00c0      	lsls	r0, r0, #3
 80013a4:	1900      	adds	r0, r0, r4
 80013a6:	0200      	lsls	r0, r0, #8
 80013a8:	e7d1      	b.n	800134e <HAL_RCC_ClockConfig+0xde>
 80013aa:	46c0      	nop			@ (mov r8, r8)
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	00001388 	.word	0x00001388
 80013b8:	fffff8ff 	.word	0xfffff8ff
 80013bc:	007a1200 	.word	0x007a1200
 80013c0:	080020b4 	.word	0x080020b4
 80013c4:	20000000 	.word	0x20000000
 80013c8:	080020d4 	.word	0x080020d4
 80013cc:	080020c4 	.word	0x080020c4

080013d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80013d0:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013d2:	2401      	movs	r4, #1
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013d4:	2573      	movs	r5, #115	@ 0x73
  tmpccer = TIMx->CCER;
 80013d6:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013d8:	6a02      	ldr	r2, [r0, #32]
 80013da:	43a2      	bics	r2, r4
 80013dc:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80013de:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80013e0:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013e2:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80013e4:	680d      	ldr	r5, [r1, #0]
 80013e6:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80013e8:	2502      	movs	r5, #2
 80013ea:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80013ec:	688d      	ldr	r5, [r1, #8]
 80013ee:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80013f0:	4d0e      	ldr	r5, [pc, #56]	@ (800142c <TIM_OC1_SetConfig+0x5c>)
 80013f2:	42a8      	cmp	r0, r5
 80013f4:	d008      	beq.n	8001408 <TIM_OC1_SetConfig+0x38>
 80013f6:	4d0e      	ldr	r5, [pc, #56]	@ (8001430 <TIM_OC1_SetConfig+0x60>)
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	d005      	beq.n	8001408 <TIM_OC1_SetConfig+0x38>
 80013fc:	4d0d      	ldr	r5, [pc, #52]	@ (8001434 <TIM_OC1_SetConfig+0x64>)
 80013fe:	42a8      	cmp	r0, r5
 8001400:	d002      	beq.n	8001408 <TIM_OC1_SetConfig+0x38>
 8001402:	4d0d      	ldr	r5, [pc, #52]	@ (8001438 <TIM_OC1_SetConfig+0x68>)
 8001404:	42a8      	cmp	r0, r5
 8001406:	d10b      	bne.n	8001420 <TIM_OC1_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001408:	2508      	movs	r5, #8
 800140a:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800140c:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800140e:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001410:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8001412:	2504      	movs	r5, #4
 8001414:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001416:	4d09      	ldr	r5, [pc, #36]	@ (800143c <TIM_OC1_SetConfig+0x6c>)
 8001418:	4015      	ands	r5, r2
    tmpcr2 |= OC_Config->OCNIdleState;
 800141a:	694a      	ldr	r2, [r1, #20]
 800141c:	4332      	orrs	r2, r6
 800141e:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001420:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001422:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001424:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001426:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001428:	6203      	str	r3, [r0, #32]
}
 800142a:	bd70      	pop	{r4, r5, r6, pc}
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40014000 	.word	0x40014000
 8001434:	40014400 	.word	0x40014400
 8001438:	40014800 	.word	0x40014800
 800143c:	fffffcff 	.word	0xfffffcff

08001440 <HAL_TIM_Base_Init>:
{
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001444:	d067      	beq.n	8001516 <HAL_TIM_Base_Init+0xd6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001446:	233d      	movs	r3, #61	@ 0x3d
 8001448:	5cc3      	ldrb	r3, [r0, r3]
 800144a:	b2da      	uxtb	r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d052      	beq.n	80014f6 <HAL_TIM_Base_Init+0xb6>
  htim->State = HAL_TIM_STATE_BUSY;
 8001450:	233d      	movs	r3, #61	@ 0x3d
 8001452:	2202      	movs	r2, #2
 8001454:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001456:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001458:	4e38      	ldr	r6, [pc, #224]	@ (800153c <HAL_TIM_Base_Init+0xfc>)
  tmpcr1 = TIMx->CR1;
 800145a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800145c:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800145e:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8001460:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001462:	42b3      	cmp	r3, r6
 8001464:	d015      	beq.n	8001492 <HAL_TIM_Base_Init+0x52>
 8001466:	4e36      	ldr	r6, [pc, #216]	@ (8001540 <HAL_TIM_Base_Init+0x100>)
 8001468:	42b3      	cmp	r3, r6
 800146a:	d012      	beq.n	8001492 <HAL_TIM_Base_Init+0x52>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800146c:	4e35      	ldr	r6, [pc, #212]	@ (8001544 <HAL_TIM_Base_Init+0x104>)
 800146e:	42b3      	cmp	r3, r6
 8001470:	d053      	beq.n	800151a <HAL_TIM_Base_Init+0xda>
 8001472:	4e35      	ldr	r6, [pc, #212]	@ (8001548 <HAL_TIM_Base_Init+0x108>)
 8001474:	42b3      	cmp	r3, r6
 8001476:	d043      	beq.n	8001500 <HAL_TIM_Base_Init+0xc0>
 8001478:	4e34      	ldr	r6, [pc, #208]	@ (800154c <HAL_TIM_Base_Init+0x10c>)
 800147a:	42b3      	cmp	r3, r6
 800147c:	d052      	beq.n	8001524 <HAL_TIM_Base_Init+0xe4>
 800147e:	4e34      	ldr	r6, [pc, #208]	@ (8001550 <HAL_TIM_Base_Init+0x110>)
 8001480:	42b3      	cmp	r3, r6
 8001482:	d03d      	beq.n	8001500 <HAL_TIM_Base_Init+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001484:	2680      	movs	r6, #128	@ 0x80
 8001486:	43b2      	bics	r2, r6
 8001488:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800148a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800148c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800148e:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001490:	e012      	b.n	80014b8 <HAL_TIM_Base_Init+0x78>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001492:	2670      	movs	r6, #112	@ 0x70
 8001494:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8001496:	68a6      	ldr	r6, [r4, #8]
 8001498:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800149a:	4e2e      	ldr	r6, [pc, #184]	@ (8001554 <HAL_TIM_Base_Init+0x114>)
 800149c:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800149e:	6926      	ldr	r6, [r4, #16]
 80014a0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014a2:	2680      	movs	r6, #128	@ 0x80
 80014a4:	43b2      	bics	r2, r6
 80014a6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80014a8:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014aa:	4a24      	ldr	r2, [pc, #144]	@ (800153c <HAL_TIM_Base_Init+0xfc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014ac:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80014ae:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d101      	bne.n	80014b8 <HAL_TIM_Base_Init+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 80014b4:	6962      	ldr	r2, [r4, #20]
 80014b6:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80014b8:	2201      	movs	r2, #1
 80014ba:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80014bc:	6919      	ldr	r1, [r3, #16]
 80014be:	420a      	tst	r2, r1
 80014c0:	d002      	beq.n	80014c8 <HAL_TIM_Base_Init+0x88>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80014c2:	6919      	ldr	r1, [r3, #16]
 80014c4:	4391      	bics	r1, r2
 80014c6:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014c8:	2301      	movs	r3, #1
 80014ca:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 80014cc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014ce:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014d0:	3a08      	subs	r2, #8
 80014d2:	54a3      	strb	r3, [r4, r2]
 80014d4:	3201      	adds	r2, #1
 80014d6:	54a3      	strb	r3, [r4, r2]
 80014d8:	3201      	adds	r2, #1
 80014da:	54a3      	strb	r3, [r4, r2]
 80014dc:	3201      	adds	r2, #1
 80014de:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014e0:	3201      	adds	r2, #1
 80014e2:	54a3      	strb	r3, [r4, r2]
 80014e4:	3201      	adds	r2, #1
 80014e6:	54a3      	strb	r3, [r4, r2]
 80014e8:	3201      	adds	r2, #1
 80014ea:	54a3      	strb	r3, [r4, r2]
 80014ec:	3201      	adds	r2, #1
 80014ee:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80014f0:	3a08      	subs	r2, #8
 80014f2:	54a3      	strb	r3, [r4, r2]
}
 80014f4:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80014f6:	333c      	adds	r3, #60	@ 0x3c
 80014f8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80014fa:	f7ff f8c1 	bl	8000680 <HAL_TIM_Base_MspInit>
 80014fe:	e7a7      	b.n	8001450 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001500:	4e14      	ldr	r6, [pc, #80]	@ (8001554 <HAL_TIM_Base_Init+0x114>)
 8001502:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001504:	6926      	ldr	r6, [r4, #16]
 8001506:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001508:	2680      	movs	r6, #128	@ 0x80
 800150a:	43b2      	bics	r2, r6
 800150c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800150e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001510:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001512:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001514:	e7ce      	b.n	80014b4 <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e7ec      	b.n	80014f4 <HAL_TIM_Base_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 800151a:	4e0e      	ldr	r6, [pc, #56]	@ (8001554 <HAL_TIM_Base_Init+0x114>)
 800151c:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800151e:	6926      	ldr	r6, [r4, #16]
 8001520:	4332      	orrs	r2, r6
 8001522:	e7af      	b.n	8001484 <HAL_TIM_Base_Init+0x44>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001524:	4e0b      	ldr	r6, [pc, #44]	@ (8001554 <HAL_TIM_Base_Init+0x114>)
 8001526:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001528:	6926      	ldr	r6, [r4, #16]
 800152a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800152c:	2680      	movs	r6, #128	@ 0x80
 800152e:	43b2      	bics	r2, r6
 8001530:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8001532:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001534:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001536:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001538:	e7bc      	b.n	80014b4 <HAL_TIM_Base_Init+0x74>
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	40012c00 	.word	0x40012c00
 8001540:	40000400 	.word	0x40000400
 8001544:	40002000 	.word	0x40002000
 8001548:	40014000 	.word	0x40014000
 800154c:	40014400 	.word	0x40014400
 8001550:	40014800 	.word	0x40014800
 8001554:	fffffcff 	.word	0xfffffcff

08001558 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001558:	213d      	movs	r1, #61	@ 0x3d
{
 800155a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 800155c:	5c42      	ldrb	r2, [r0, r1]
{
 800155e:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8001560:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8001562:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001564:	2a01      	cmp	r2, #1
 8001566:	d10f      	bne.n	8001588 <HAL_TIM_Base_Start+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 8001568:	3201      	adds	r2, #1
 800156a:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_TIM_Base_Start+0x48>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00a      	beq.n	800158a <HAL_TIM_Base_Start+0x32>
 8001574:	4a0b      	ldr	r2, [pc, #44]	@ (80015a4 <HAL_TIM_Base_Start+0x4c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_TIM_Base_Start+0x32>
 800157a:	4a0b      	ldr	r2, [pc, #44]	@ (80015a8 <HAL_TIM_Base_Start+0x50>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d004      	beq.n	800158a <HAL_TIM_Base_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4322      	orrs	r2, r4
 8001584:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001586:	2000      	movs	r0, #0
}
 8001588:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800158a:	2207      	movs	r2, #7
 800158c:	6899      	ldr	r1, [r3, #8]
 800158e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001590:	2a06      	cmp	r2, #6
 8001592:	d0f8      	beq.n	8001586 <HAL_TIM_Base_Start+0x2e>
      __HAL_TIM_ENABLE(htim);
 8001594:	2101      	movs	r1, #1
 8001596:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800159a:	430a      	orrs	r2, r1
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e7f3      	b.n	8001588 <HAL_TIM_Base_Start+0x30>
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40000400 	.word	0x40000400
 80015a8:	40014000 	.word	0x40014000

080015ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80015ac:	213d      	movs	r1, #61	@ 0x3d
{
 80015ae:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80015b0:	5c42      	ldrb	r2, [r0, r1]
{
 80015b2:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80015b4:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80015b8:	2a01      	cmp	r2, #1
 80015ba:	d112      	bne.n	80015e2 <HAL_TIM_Base_Start_IT+0x36>
  htim->State = HAL_TIM_STATE_BUSY;
 80015bc:	3201      	adds	r2, #1
 80015be:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68da      	ldr	r2, [r3, #12]
 80015c4:	4322      	orrs	r2, r4
 80015c6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015c8:	4a0c      	ldr	r2, [pc, #48]	@ (80015fc <HAL_TIM_Base_Start_IT+0x50>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00a      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x38>
 80015ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001600 <HAL_TIM_Base_Start_IT+0x54>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d007      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x38>
 80015d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <HAL_TIM_Base_Start_IT+0x58>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d004      	beq.n	80015e4 <HAL_TIM_Base_Start_IT+0x38>
    __HAL_TIM_ENABLE(htim);
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4322      	orrs	r2, r4
 80015de:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80015e0:	2000      	movs	r0, #0
}
 80015e2:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015e4:	2207      	movs	r2, #7
 80015e6:	6899      	ldr	r1, [r3, #8]
 80015e8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015ea:	2a06      	cmp	r2, #6
 80015ec:	d0f8      	beq.n	80015e0 <HAL_TIM_Base_Start_IT+0x34>
      __HAL_TIM_ENABLE(htim);
 80015ee:	2101      	movs	r1, #1
 80015f0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80015f2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80015f4:	430a      	orrs	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e7f3      	b.n	80015e2 <HAL_TIM_Base_Start_IT+0x36>
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	40012c00 	.word	0x40012c00
 8001600:	40000400 	.word	0x40000400
 8001604:	40014000 	.word	0x40014000

08001608 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8001608:	4770      	bx	lr
 800160a:	46c0      	nop			@ (mov r8, r8)

0800160c <HAL_TIM_PWM_Init>:
{
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001610:	d067      	beq.n	80016e2 <HAL_TIM_PWM_Init+0xd6>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001612:	233d      	movs	r3, #61	@ 0x3d
 8001614:	5cc3      	ldrb	r3, [r0, r3]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	d052      	beq.n	80016c2 <HAL_TIM_PWM_Init+0xb6>
  htim->State = HAL_TIM_STATE_BUSY;
 800161c:	233d      	movs	r3, #61	@ 0x3d
 800161e:	2202      	movs	r2, #2
 8001620:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001622:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001624:	4e38      	ldr	r6, [pc, #224]	@ (8001708 <HAL_TIM_PWM_Init+0xfc>)
  tmpcr1 = TIMx->CR1;
 8001626:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001628:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800162a:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800162c:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800162e:	42b3      	cmp	r3, r6
 8001630:	d015      	beq.n	800165e <HAL_TIM_PWM_Init+0x52>
 8001632:	4e36      	ldr	r6, [pc, #216]	@ (800170c <HAL_TIM_PWM_Init+0x100>)
 8001634:	42b3      	cmp	r3, r6
 8001636:	d012      	beq.n	800165e <HAL_TIM_PWM_Init+0x52>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001638:	4e35      	ldr	r6, [pc, #212]	@ (8001710 <HAL_TIM_PWM_Init+0x104>)
 800163a:	42b3      	cmp	r3, r6
 800163c:	d053      	beq.n	80016e6 <HAL_TIM_PWM_Init+0xda>
 800163e:	4e35      	ldr	r6, [pc, #212]	@ (8001714 <HAL_TIM_PWM_Init+0x108>)
 8001640:	42b3      	cmp	r3, r6
 8001642:	d043      	beq.n	80016cc <HAL_TIM_PWM_Init+0xc0>
 8001644:	4e34      	ldr	r6, [pc, #208]	@ (8001718 <HAL_TIM_PWM_Init+0x10c>)
 8001646:	42b3      	cmp	r3, r6
 8001648:	d052      	beq.n	80016f0 <HAL_TIM_PWM_Init+0xe4>
 800164a:	4e34      	ldr	r6, [pc, #208]	@ (800171c <HAL_TIM_PWM_Init+0x110>)
 800164c:	42b3      	cmp	r3, r6
 800164e:	d03d      	beq.n	80016cc <HAL_TIM_PWM_Init+0xc0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001650:	2680      	movs	r6, #128	@ 0x80
 8001652:	43b2      	bics	r2, r6
 8001654:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001656:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001658:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800165a:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800165c:	e012      	b.n	8001684 <HAL_TIM_PWM_Init+0x78>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800165e:	2670      	movs	r6, #112	@ 0x70
 8001660:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8001662:	68a6      	ldr	r6, [r4, #8]
 8001664:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001666:	4e2e      	ldr	r6, [pc, #184]	@ (8001720 <HAL_TIM_PWM_Init+0x114>)
 8001668:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800166a:	6926      	ldr	r6, [r4, #16]
 800166c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800166e:	2680      	movs	r6, #128	@ 0x80
 8001670:	43b2      	bics	r2, r6
 8001672:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001674:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001676:	4a24      	ldr	r2, [pc, #144]	@ (8001708 <HAL_TIM_PWM_Init+0xfc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001678:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800167a:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_TIM_PWM_Init+0x78>
    TIMx->RCR = Structure->RepetitionCounter;
 8001680:	6962      	ldr	r2, [r4, #20]
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001684:	2201      	movs	r2, #1
 8001686:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001688:	6919      	ldr	r1, [r3, #16]
 800168a:	420a      	tst	r2, r1
 800168c:	d002      	beq.n	8001694 <HAL_TIM_PWM_Init+0x88>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800168e:	6919      	ldr	r1, [r3, #16]
 8001690:	4391      	bics	r1, r2
 8001692:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001694:	2301      	movs	r3, #1
 8001696:	2246      	movs	r2, #70	@ 0x46
  return HAL_OK;
 8001698:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800169a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800169c:	3a08      	subs	r2, #8
 800169e:	54a3      	strb	r3, [r4, r2]
 80016a0:	3201      	adds	r2, #1
 80016a2:	54a3      	strb	r3, [r4, r2]
 80016a4:	3201      	adds	r2, #1
 80016a6:	54a3      	strb	r3, [r4, r2]
 80016a8:	3201      	adds	r2, #1
 80016aa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016ac:	3201      	adds	r2, #1
 80016ae:	54a3      	strb	r3, [r4, r2]
 80016b0:	3201      	adds	r2, #1
 80016b2:	54a3      	strb	r3, [r4, r2]
 80016b4:	3201      	adds	r2, #1
 80016b6:	54a3      	strb	r3, [r4, r2]
 80016b8:	3201      	adds	r2, #1
 80016ba:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80016bc:	3a08      	subs	r2, #8
 80016be:	54a3      	strb	r3, [r4, r2]
}
 80016c0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80016c2:	333c      	adds	r3, #60	@ 0x3c
 80016c4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80016c6:	f7ff ff9f 	bl	8001608 <HAL_TIM_PWM_MspInit>
 80016ca:	e7a7      	b.n	800161c <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016cc:	4e14      	ldr	r6, [pc, #80]	@ (8001720 <HAL_TIM_PWM_Init+0x114>)
 80016ce:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016d0:	6926      	ldr	r6, [r4, #16]
 80016d2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016d4:	2680      	movs	r6, #128	@ 0x80
 80016d6:	43b2      	bics	r2, r6
 80016d8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80016da:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016dc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016de:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016e0:	e7ce      	b.n	8001680 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
 80016e4:	e7ec      	b.n	80016c0 <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016e6:	4e0e      	ldr	r6, [pc, #56]	@ (8001720 <HAL_TIM_PWM_Init+0x114>)
 80016e8:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ea:	6926      	ldr	r6, [r4, #16]
 80016ec:	4332      	orrs	r2, r6
 80016ee:	e7af      	b.n	8001650 <HAL_TIM_PWM_Init+0x44>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016f0:	4e0b      	ldr	r6, [pc, #44]	@ (8001720 <HAL_TIM_PWM_Init+0x114>)
 80016f2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016f4:	6926      	ldr	r6, [r4, #16]
 80016f6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016f8:	2680      	movs	r6, #128	@ 0x80
 80016fa:	43b2      	bics	r2, r6
 80016fc:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 80016fe:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001700:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001702:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001704:	e7bc      	b.n	8001680 <HAL_TIM_PWM_Init+0x74>
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40000400 	.word	0x40000400
 8001710:	40002000 	.word	0x40002000
 8001714:	40014000 	.word	0x40014000
 8001718:	40014400 	.word	0x40014400
 800171c:	40014800 	.word	0x40014800
 8001720:	fffffcff 	.word	0xfffffcff

08001724 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001724:	2900      	cmp	r1, #0
 8001726:	d125      	bne.n	8001774 <HAL_TIM_PWM_Start+0x50>
 8001728:	233e      	movs	r3, #62	@ 0x3e
 800172a:	5cc2      	ldrb	r2, [r0, r3]
 800172c:	2a01      	cmp	r2, #1
 800172e:	d129      	bne.n	8001784 <HAL_TIM_PWM_Start+0x60>
 8001730:	2202      	movs	r2, #2
 8001732:	54c2      	strb	r2, [r0, r3]
 8001734:	221f      	movs	r2, #31
 8001736:	4011      	ands	r1, r2
 8001738:	3a1e      	subs	r2, #30
 800173a:	408a      	lsls	r2, r1
 800173c:	6803      	ldr	r3, [r0, #0]
 800173e:	6a19      	ldr	r1, [r3, #32]
 8001740:	4391      	bics	r1, r2
 8001742:	6219      	str	r1, [r3, #32]
 8001744:	6a19      	ldr	r1, [r3, #32]
 8001746:	430a      	orrs	r2, r1
 8001748:	621a      	str	r2, [r3, #32]
 800174a:	4a1f      	ldr	r2, [pc, #124]	@ (80017c8 <HAL_TIM_PWM_Start+0xa4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d01b      	beq.n	8001788 <HAL_TIM_PWM_Start+0x64>
 8001750:	4a1e      	ldr	r2, [pc, #120]	@ (80017cc <HAL_TIM_PWM_Start+0xa8>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d018      	beq.n	8001788 <HAL_TIM_PWM_Start+0x64>
 8001756:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_TIM_PWM_Start+0xac>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d029      	beq.n	80017b0 <HAL_TIM_PWM_Start+0x8c>
 800175c:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_TIM_PWM_Start+0xb0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d026      	beq.n	80017b0 <HAL_TIM_PWM_Start+0x8c>
 8001762:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_TIM_PWM_Start+0xb4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d014      	beq.n	8001792 <HAL_TIM_PWM_Start+0x6e>
 8001768:	2101      	movs	r1, #1
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	2000      	movs	r0, #0
 8001772:	4770      	bx	lr
 8001774:	2904      	cmp	r1, #4
 8001776:	d016      	beq.n	80017a6 <HAL_TIM_PWM_Start+0x82>
 8001778:	2908      	cmp	r1, #8
 800177a:	d01f      	beq.n	80017bc <HAL_TIM_PWM_Start+0x98>
 800177c:	2341      	movs	r3, #65	@ 0x41
 800177e:	5cc2      	ldrb	r2, [r0, r3]
 8001780:	2a01      	cmp	r2, #1
 8001782:	d0d5      	beq.n	8001730 <HAL_TIM_PWM_Start+0xc>
 8001784:	2001      	movs	r0, #1
 8001786:	e7f4      	b.n	8001772 <HAL_TIM_PWM_Start+0x4e>
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800178c:	0212      	lsls	r2, r2, #8
 800178e:	430a      	orrs	r2, r1
 8001790:	645a      	str	r2, [r3, #68]	@ 0x44
 8001792:	2207      	movs	r2, #7
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	400a      	ands	r2, r1
 8001798:	2a06      	cmp	r2, #6
 800179a:	d0e9      	beq.n	8001770 <HAL_TIM_PWM_Start+0x4c>
 800179c:	2101      	movs	r1, #1
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	e7e4      	b.n	8001770 <HAL_TIM_PWM_Start+0x4c>
 80017a6:	233f      	movs	r3, #63	@ 0x3f
 80017a8:	5cc2      	ldrb	r2, [r0, r3]
 80017aa:	2a01      	cmp	r2, #1
 80017ac:	d0c0      	beq.n	8001730 <HAL_TIM_PWM_Start+0xc>
 80017ae:	e7e9      	b.n	8001784 <HAL_TIM_PWM_Start+0x60>
 80017b0:	2280      	movs	r2, #128	@ 0x80
 80017b2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80017b4:	0212      	lsls	r2, r2, #8
 80017b6:	430a      	orrs	r2, r1
 80017b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80017ba:	e7ef      	b.n	800179c <HAL_TIM_PWM_Start+0x78>
 80017bc:	2340      	movs	r3, #64	@ 0x40
 80017be:	5cc2      	ldrb	r2, [r0, r3]
 80017c0:	2a01      	cmp	r2, #1
 80017c2:	d0b5      	beq.n	8001730 <HAL_TIM_PWM_Start+0xc>
 80017c4:	e7de      	b.n	8001784 <HAL_TIM_PWM_Start+0x60>
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	40012c00 	.word	0x40012c00
 80017cc:	40014000 	.word	0x40014000
 80017d0:	40014400 	.word	0x40014400
 80017d4:	40014800 	.word	0x40014800
 80017d8:	40000400 	.word	0x40000400

080017dc <HAL_TIM_OnePulse_MspInit>:
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
 80017dc:	4770      	bx	lr
 80017de:	46c0      	nop			@ (mov r8, r8)

080017e0 <HAL_TIM_OnePulse_Init>:
{
 80017e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e2:	0004      	movs	r4, r0
 80017e4:	000d      	movs	r5, r1
  if (htim == NULL)
 80017e6:	2800      	cmp	r0, #0
 80017e8:	d066      	beq.n	80018b8 <HAL_TIM_OnePulse_Init+0xd8>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017ea:	233d      	movs	r3, #61	@ 0x3d
 80017ec:	5cc3      	ldrb	r3, [r0, r3]
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d051      	beq.n	8001898 <HAL_TIM_OnePulse_Init+0xb8>
  htim->State = HAL_TIM_STATE_BUSY;
 80017f4:	233d      	movs	r3, #61	@ 0x3d
 80017f6:	2202      	movs	r2, #2
 80017f8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017fa:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017fc:	4f37      	ldr	r7, [pc, #220]	@ (80018dc <HAL_TIM_OnePulse_Init+0xfc>)
  tmpcr1 = TIMx->CR1;
 80017fe:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001800:	69a6      	ldr	r6, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001802:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8001804:	6861      	ldr	r1, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001806:	42bb      	cmp	r3, r7
 8001808:	d015      	beq.n	8001836 <HAL_TIM_OnePulse_Init+0x56>
 800180a:	4f35      	ldr	r7, [pc, #212]	@ (80018e0 <HAL_TIM_OnePulse_Init+0x100>)
 800180c:	42bb      	cmp	r3, r7
 800180e:	d012      	beq.n	8001836 <HAL_TIM_OnePulse_Init+0x56>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001810:	4f34      	ldr	r7, [pc, #208]	@ (80018e4 <HAL_TIM_OnePulse_Init+0x104>)
 8001812:	42bb      	cmp	r3, r7
 8001814:	d052      	beq.n	80018bc <HAL_TIM_OnePulse_Init+0xdc>
 8001816:	4f34      	ldr	r7, [pc, #208]	@ (80018e8 <HAL_TIM_OnePulse_Init+0x108>)
 8001818:	42bb      	cmp	r3, r7
 800181a:	d042      	beq.n	80018a2 <HAL_TIM_OnePulse_Init+0xc2>
 800181c:	4f33      	ldr	r7, [pc, #204]	@ (80018ec <HAL_TIM_OnePulse_Init+0x10c>)
 800181e:	42bb      	cmp	r3, r7
 8001820:	d051      	beq.n	80018c6 <HAL_TIM_OnePulse_Init+0xe6>
 8001822:	4f33      	ldr	r7, [pc, #204]	@ (80018f0 <HAL_TIM_OnePulse_Init+0x110>)
 8001824:	42bb      	cmp	r3, r7
 8001826:	d03c      	beq.n	80018a2 <HAL_TIM_OnePulse_Init+0xc2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001828:	2780      	movs	r7, #128	@ 0x80
 800182a:	43ba      	bics	r2, r7
 800182c:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 800182e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001830:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001832:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001834:	e012      	b.n	800185c <HAL_TIM_OnePulse_Init+0x7c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001836:	2770      	movs	r7, #112	@ 0x70
 8001838:	43ba      	bics	r2, r7
    tmpcr1 |= Structure->CounterMode;
 800183a:	68a7      	ldr	r7, [r4, #8]
 800183c:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800183e:	4f2d      	ldr	r7, [pc, #180]	@ (80018f4 <HAL_TIM_OnePulse_Init+0x114>)
 8001840:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001842:	6927      	ldr	r7, [r4, #16]
 8001844:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001846:	2780      	movs	r7, #128	@ 0x80
 8001848:	43ba      	bics	r2, r7
 800184a:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 800184c:	601a      	str	r2, [r3, #0]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800184e:	4a23      	ldr	r2, [pc, #140]	@ (80018dc <HAL_TIM_OnePulse_Init+0xfc>)
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001850:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001852:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001854:	4293      	cmp	r3, r2
 8001856:	d101      	bne.n	800185c <HAL_TIM_OnePulse_Init+0x7c>
    TIMx->RCR = Structure->RepetitionCounter;
 8001858:	6962      	ldr	r2, [r4, #20]
 800185a:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	420a      	tst	r2, r1
 8001864:	d002      	beq.n	800186c <HAL_TIM_OnePulse_Init+0x8c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	4391      	bics	r1, r2
 800186a:	6119      	str	r1, [r3, #16]
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800186c:	2108      	movs	r1, #8
 800186e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8001872:	438a      	bics	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
  htim->Instance->CR1 |= OnePulseMode;
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	432a      	orrs	r2, r5
 800187a:	601a      	str	r2, [r3, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187c:	2301      	movs	r3, #1
 800187e:	2246      	movs	r2, #70	@ 0x46
 8001880:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8001882:	3a08      	subs	r2, #8
 8001884:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8001886:	3201      	adds	r2, #1
 8001888:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800188a:	3203      	adds	r2, #3
 800188c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800188e:	3201      	adds	r2, #1
 8001890:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001892:	3a06      	subs	r2, #6
 8001894:	54a3      	strb	r3, [r4, r2]
}
 8001896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8001898:	333c      	adds	r3, #60	@ 0x3c
 800189a:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OnePulse_MspInit(htim);
 800189c:	f7ff ff9e 	bl	80017dc <HAL_TIM_OnePulse_MspInit>
 80018a0:	e7a8      	b.n	80017f4 <HAL_TIM_OnePulse_Init+0x14>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018a2:	4f14      	ldr	r7, [pc, #80]	@ (80018f4 <HAL_TIM_OnePulse_Init+0x114>)
 80018a4:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018a6:	6927      	ldr	r7, [r4, #16]
 80018a8:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018aa:	2780      	movs	r7, #128	@ 0x80
 80018ac:	43ba      	bics	r2, r7
 80018ae:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 80018b0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018b4:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018b6:	e7cf      	b.n	8001858 <HAL_TIM_OnePulse_Init+0x78>
    return HAL_ERROR;
 80018b8:	2001      	movs	r0, #1
 80018ba:	e7ec      	b.n	8001896 <HAL_TIM_OnePulse_Init+0xb6>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018bc:	4f0d      	ldr	r7, [pc, #52]	@ (80018f4 <HAL_TIM_OnePulse_Init+0x114>)
 80018be:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018c0:	6927      	ldr	r7, [r4, #16]
 80018c2:	433a      	orrs	r2, r7
 80018c4:	e7b0      	b.n	8001828 <HAL_TIM_OnePulse_Init+0x48>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018c6:	4f0b      	ldr	r7, [pc, #44]	@ (80018f4 <HAL_TIM_OnePulse_Init+0x114>)
 80018c8:	403a      	ands	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ca:	6927      	ldr	r7, [r4, #16]
 80018cc:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018ce:	2780      	movs	r7, #128	@ 0x80
 80018d0:	43ba      	bics	r2, r7
 80018d2:	4316      	orrs	r6, r2
  TIMx->CR1 = tmpcr1;
 80018d4:	601e      	str	r6, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018d6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018d8:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018da:	e7bd      	b.n	8001858 <HAL_TIM_OnePulse_Init+0x78>
 80018dc:	40012c00 	.word	0x40012c00
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40002000 	.word	0x40002000
 80018e8:	40014000 	.word	0x40014000
 80018ec:	40014400 	.word	0x40014400
 80018f0:	40014800 	.word	0x40014800
 80018f4:	fffffcff 	.word	0xfffffcff

080018f8 <HAL_TIM_OnePulse_Start_IT>:
{
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	46c6      	mov	lr, r8
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80018fc:	223e      	movs	r2, #62	@ 0x3e
{
 80018fe:	0003      	movs	r3, r0
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001900:	2642      	movs	r6, #66	@ 0x42
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001902:	2543      	movs	r5, #67	@ 0x43
{
 8001904:	b500      	push	{lr}
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001906:	4690      	mov	r8, r2
 8001908:	5c84      	ldrb	r4, [r0, r2]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800190a:	3201      	adds	r2, #1
 800190c:	4694      	mov	ip, r2
 800190e:	5c9a      	ldrb	r2, [r3, r2]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001910:	5d99      	ldrb	r1, [r3, r6]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8001912:	5d5f      	ldrb	r7, [r3, r5]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8001914:	b2e0      	uxtb	r0, r4
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8001916:	b2d2      	uxtb	r2, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8001918:	b2c9      	uxtb	r1, r1
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800191a:	b2ff      	uxtb	r7, r7
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800191c:	2c01      	cmp	r4, #1
 800191e:	d104      	bne.n	800192a <HAL_TIM_OnePulse_Start_IT+0x32>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8001920:	2a01      	cmp	r2, #1
 8001922:	d004      	beq.n	800192e <HAL_TIM_OnePulse_Start_IT+0x36>
}
 8001924:	bc80      	pop	{r7}
 8001926:	46b8      	mov	r8, r7
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800192a:	2001      	movs	r0, #1
 800192c:	e7fa      	b.n	8001924 <HAL_TIM_OnePulse_Start_IT+0x2c>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800192e:	2901      	cmp	r1, #1
 8001930:	d1f8      	bne.n	8001924 <HAL_TIM_OnePulse_Start_IT+0x2c>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8001932:	2f01      	cmp	r7, #1
 8001934:	d1f6      	bne.n	8001924 <HAL_TIM_OnePulse_Start_IT+0x2c>
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001936:	4641      	mov	r1, r8
 8001938:	3201      	adds	r2, #1
 800193a:	545a      	strb	r2, [r3, r1]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800193c:	4661      	mov	r1, ip
 800193e:	545a      	strb	r2, [r3, r1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8001940:	559a      	strb	r2, [r3, r6]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8001942:	555a      	strb	r2, [r3, r5]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68d9      	ldr	r1, [r3, #12]
 8001948:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800194a:	2104      	movs	r1, #4
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800194c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001954:	6a1a      	ldr	r2, [r3, #32]
 8001956:	310c      	adds	r1, #12
 8001958:	43ba      	bics	r2, r7
 800195a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	433a      	orrs	r2, r7
 8001960:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001962:	6a1a      	ldr	r2, [r3, #32]
 8001964:	438a      	bics	r2, r1
 8001966:	621a      	str	r2, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	430a      	orrs	r2, r1
 800196c:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <HAL_TIM_OnePulse_Start_IT+0xa0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00a      	beq.n	800198a <HAL_TIM_OnePulse_Start_IT+0x92>
 8001974:	4a09      	ldr	r2, [pc, #36]	@ (800199c <HAL_TIM_OnePulse_Start_IT+0xa4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_TIM_OnePulse_Start_IT+0x92>
 800197a:	4a09      	ldr	r2, [pc, #36]	@ (80019a0 <HAL_TIM_OnePulse_Start_IT+0xa8>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d004      	beq.n	800198a <HAL_TIM_OnePulse_Start_IT+0x92>
 8001980:	4a08      	ldr	r2, [pc, #32]	@ (80019a4 <HAL_TIM_OnePulse_Start_IT+0xac>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d001      	beq.n	800198a <HAL_TIM_OnePulse_Start_IT+0x92>
  return HAL_OK;
 8001986:	2000      	movs	r0, #0
 8001988:	e7cc      	b.n	8001924 <HAL_TIM_OnePulse_Start_IT+0x2c>
    __HAL_TIM_MOE_ENABLE(htim);
 800198a:	2280      	movs	r2, #128	@ 0x80
 800198c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800198e:	0212      	lsls	r2, r2, #8
 8001990:	430a      	orrs	r2, r1
  return HAL_OK;
 8001992:	2000      	movs	r0, #0
    __HAL_TIM_MOE_ENABLE(htim);
 8001994:	645a      	str	r2, [r3, #68]	@ 0x44
 8001996:	e7c5      	b.n	8001924 <HAL_TIM_OnePulse_Start_IT+0x2c>
 8001998:	40012c00 	.word	0x40012c00
 800199c:	40014000 	.word	0x40014000
 80019a0:	40014400 	.word	0x40014400
 80019a4:	40014800 	.word	0x40014800

080019a8 <HAL_TIM_PWM_ConfigChannel>:
{
 80019a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80019aa:	233c      	movs	r3, #60	@ 0x3c
{
 80019ac:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80019ae:	5cc1      	ldrb	r1, [r0, r3]
{
 80019b0:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80019b2:	2901      	cmp	r1, #1
 80019b4:	d100      	bne.n	80019b8 <HAL_TIM_PWM_ConfigChannel+0x10>
 80019b6:	e0df      	b.n	8001b78 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 80019b8:	2101      	movs	r1, #1
 80019ba:	54c1      	strb	r1, [r0, r3]
  switch (Channel)
 80019bc:	2a08      	cmp	r2, #8
 80019be:	d100      	bne.n	80019c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80019c0:	e09b      	b.n	8001afa <HAL_TIM_PWM_ConfigChannel+0x152>
 80019c2:	d837      	bhi.n	8001a34 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d100      	bne.n	80019ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80019c8:	e084      	b.n	8001ad4 <HAL_TIM_PWM_ConfigChannel+0x12c>
 80019ca:	2a04      	cmp	r2, #4
 80019cc:	d167      	bne.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0xf6>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ce:	2110      	movs	r1, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80019d0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019d2:	4e6a      	ldr	r6, [pc, #424]	@ (8001b7c <HAL_TIM_PWM_ConfigChannel+0x1d4>)
  tmpccer = TIMx->CCER;
 80019d4:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	438a      	bics	r2, r1
 80019da:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80019dc:	6859      	ldr	r1, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80019de:	699a      	ldr	r2, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019e0:	4032      	ands	r2, r6
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019e2:	682e      	ldr	r6, [r5, #0]
 80019e4:	0236      	lsls	r6, r6, #8
 80019e6:	4316      	orrs	r6, r2
  tmpccer &= ~TIM_CCER_CC2P;
 80019e8:	2220      	movs	r2, #32
 80019ea:	4390      	bics	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019ec:	68aa      	ldr	r2, [r5, #8]
 80019ee:	0112      	lsls	r2, r2, #4
 80019f0:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80019f2:	4863      	ldr	r0, [pc, #396]	@ (8001b80 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 80019f4:	4283      	cmp	r3, r0
 80019f6:	d05d      	beq.n	8001ab4 <HAL_TIM_PWM_ConfigChannel+0x10c>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019f8:	4862      	ldr	r0, [pc, #392]	@ (8001b84 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 80019fa:	4283      	cmp	r3, r0
 80019fc:	d062      	beq.n	8001ac4 <HAL_TIM_PWM_ConfigChannel+0x11c>
 80019fe:	4862      	ldr	r0, [pc, #392]	@ (8001b88 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8001a00:	4283      	cmp	r3, r0
 8001a02:	d05f      	beq.n	8001ac4 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8001a04:	4861      	ldr	r0, [pc, #388]	@ (8001b8c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8001a06:	4283      	cmp	r3, r0
 8001a08:	d05c      	beq.n	8001ac4 <HAL_TIM_PWM_ConfigChannel+0x11c>
  TIMx->CR2 = tmpcr2;
 8001a0a:	6059      	str	r1, [r3, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a0c:	6869      	ldr	r1, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001a0e:	619e      	str	r6, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001a10:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8001a12:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a14:	2280      	movs	r2, #128	@ 0x80
 8001a16:	6999      	ldr	r1, [r3, #24]
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a1e:	699a      	ldr	r2, [r3, #24]
 8001a20:	495b      	ldr	r1, [pc, #364]	@ (8001b90 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2000      	movs	r0, #0
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a24:	400a      	ands	r2, r1
 8001a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001a28:	692a      	ldr	r2, [r5, #16]
 8001a2a:	6999      	ldr	r1, [r3, #24]
 8001a2c:	0212      	lsls	r2, r2, #8
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	619a      	str	r2, [r3, #24]
      break;
 8001a32:	e035      	b.n	8001aa0 <HAL_TIM_PWM_ConfigChannel+0xf8>
  switch (Channel)
 8001a34:	2a0c      	cmp	r2, #12
 8001a36:	d132      	bne.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0xf6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001a38:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a3a:	4856      	ldr	r0, [pc, #344]	@ (8001b94 <HAL_TIM_PWM_ConfigChannel+0x1ec>)
  tmpccer = TIMx->CCER;
 8001a3c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001a3e:	6a1a      	ldr	r2, [r3, #32]
 8001a40:	4002      	ands	r2, r0
 8001a42:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a44:	484d      	ldr	r0, [pc, #308]	@ (8001b7c <HAL_TIM_PWM_ConfigChannel+0x1d4>)
  tmpcr2 =  TIMx->CR2;
 8001a46:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001a48:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001a4a:	4002      	ands	r2, r0
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a4c:	6828      	ldr	r0, [r5, #0]
 8001a4e:	0200      	lsls	r0, r0, #8
 8001a50:	4310      	orrs	r0, r2
  tmpccer &= ~TIM_CCER_CC4P;
 8001a52:	4a51      	ldr	r2, [pc, #324]	@ (8001b98 <HAL_TIM_PWM_ConfigChannel+0x1f0>)
 8001a54:	4011      	ands	r1, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001a56:	68aa      	ldr	r2, [r5, #8]
 8001a58:	0312      	lsls	r2, r2, #12
 8001a5a:	430a      	orrs	r2, r1
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a5c:	4948      	ldr	r1, [pc, #288]	@ (8001b80 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 8001a5e:	428b      	cmp	r3, r1
 8001a60:	d022      	beq.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x100>
 8001a62:	4948      	ldr	r1, [pc, #288]	@ (8001b84 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8001a64:	428b      	cmp	r3, r1
 8001a66:	d01f      	beq.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x100>
 8001a68:	4947      	ldr	r1, [pc, #284]	@ (8001b88 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8001a6a:	428b      	cmp	r3, r1
 8001a6c:	d01c      	beq.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x100>
 8001a6e:	4947      	ldr	r1, [pc, #284]	@ (8001b8c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8001a70:	428b      	cmp	r3, r1
 8001a72:	d019      	beq.n	8001aa8 <HAL_TIM_PWM_ConfigChannel+0x100>
  TIMx->CCR4 = OC_Config->Pulse;
 8001a74:	6869      	ldr	r1, [r5, #4]
  TIMx->CR2 = tmpcr2;
 8001a76:	605e      	str	r6, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a78:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001a7a:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8001a7c:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a7e:	2280      	movs	r2, #128	@ 0x80
 8001a80:	69d9      	ldr	r1, [r3, #28]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	430a      	orrs	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a88:	69da      	ldr	r2, [r3, #28]
 8001a8a:	4941      	ldr	r1, [pc, #260]	@ (8001b90 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
  HAL_StatusTypeDef status = HAL_OK;
 8001a8c:	2000      	movs	r0, #0
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a8e:	400a      	ands	r2, r1
 8001a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a92:	692a      	ldr	r2, [r5, #16]
 8001a94:	69d9      	ldr	r1, [r3, #28]
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	61da      	str	r2, [r3, #28]
      break;
 8001a9c:	e000      	b.n	8001aa0 <HAL_TIM_PWM_ConfigChannel+0xf8>
  switch (Channel)
 8001a9e:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001aa0:	233c      	movs	r3, #60	@ 0x3c
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	54e2      	strb	r2, [r4, r3]
}
 8001aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001aa8:	493c      	ldr	r1, [pc, #240]	@ (8001b9c <HAL_TIM_PWM_ConfigChannel+0x1f4>)
 8001aaa:	4031      	ands	r1, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001aac:	696e      	ldr	r6, [r5, #20]
 8001aae:	01b6      	lsls	r6, r6, #6
 8001ab0:	430e      	orrs	r6, r1
 8001ab2:	e7df      	b.n	8001a74 <HAL_TIM_PWM_ConfigChannel+0xcc>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ab4:	2080      	movs	r0, #128	@ 0x80
 8001ab6:	4382      	bics	r2, r0
 8001ab8:	0017      	movs	r7, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001aba:	68ea      	ldr	r2, [r5, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 8001abc:	3840      	subs	r0, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	433a      	orrs	r2, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ac2:	4382      	bics	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ac4:	4836      	ldr	r0, [pc, #216]	@ (8001ba0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001ac6:	69af      	ldr	r7, [r5, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ac8:	4008      	ands	r0, r1
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001aca:	6969      	ldr	r1, [r5, #20]
 8001acc:	4339      	orrs	r1, r7
 8001ace:	0089      	lsls	r1, r1, #2
 8001ad0:	4301      	orrs	r1, r0
 8001ad2:	e79a      	b.n	8001a0a <HAL_TIM_PWM_ConfigChannel+0x62>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ad4:	6806      	ldr	r6, [r0, #0]
 8001ad6:	0029      	movs	r1, r5
 8001ad8:	0030      	movs	r0, r6
 8001ada:	f7ff fc79 	bl	80013d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ade:	2208      	movs	r2, #8
 8001ae0:	69b3      	ldr	r3, [r6, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ae8:	69b3      	ldr	r3, [r6, #24]
 8001aea:	3a04      	subs	r2, #4
 8001aec:	4393      	bics	r3, r2
 8001aee:	61b3      	str	r3, [r6, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001af0:	69b3      	ldr	r3, [r6, #24]
 8001af2:	692a      	ldr	r2, [r5, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61b3      	str	r3, [r6, #24]
      break;
 8001af8:	e7d2      	b.n	8001aa0 <HAL_TIM_PWM_ConfigChannel+0xf8>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001afa:	2673      	movs	r6, #115	@ 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001afc:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001afe:	4929      	ldr	r1, [pc, #164]	@ (8001ba4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
  tmpccer = TIMx->CCER;
 8001b00:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001b02:	6a1a      	ldr	r2, [r3, #32]
 8001b04:	400a      	ands	r2, r1
 8001b06:	621a      	str	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8001b08:	6859      	ldr	r1, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8001b0a:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001b0c:	43b2      	bics	r2, r6
  tmpccmrx |= OC_Config->OCMode;
 8001b0e:	682e      	ldr	r6, [r5, #0]
 8001b10:	4316      	orrs	r6, r2
  tmpccer &= ~TIM_CCER_CC3P;
 8001b12:	4a25      	ldr	r2, [pc, #148]	@ (8001ba8 <HAL_TIM_PWM_ConfigChannel+0x200>)
 8001b14:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001b16:	68aa      	ldr	r2, [r5, #8]
 8001b18:	0212      	lsls	r2, r2, #8
 8001b1a:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001b1c:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <HAL_TIM_PWM_ConfigChannel+0x1d8>)
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	d01b      	beq.n	8001b5a <HAL_TIM_PWM_ConfigChannel+0x1b2>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b22:	4818      	ldr	r0, [pc, #96]	@ (8001b84 <HAL_TIM_PWM_ConfigChannel+0x1dc>)
 8001b24:	4283      	cmp	r3, r0
 8001b26:	d01f      	beq.n	8001b68 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8001b28:	4817      	ldr	r0, [pc, #92]	@ (8001b88 <HAL_TIM_PWM_ConfigChannel+0x1e0>)
 8001b2a:	4283      	cmp	r3, r0
 8001b2c:	d01c      	beq.n	8001b68 <HAL_TIM_PWM_ConfigChannel+0x1c0>
 8001b2e:	4817      	ldr	r0, [pc, #92]	@ (8001b8c <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8001b30:	4283      	cmp	r3, r0
 8001b32:	d019      	beq.n	8001b68 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CR2 = tmpcr2;
 8001b34:	6059      	str	r1, [r3, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8001b36:	6869      	ldr	r1, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001b38:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001b3a:	63d9      	str	r1, [r3, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b3c:	2108      	movs	r1, #8
  TIMx->CCER = tmpccer;
 8001b3e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b40:	69da      	ldr	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001b42:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b44:	430a      	orrs	r2, r1
 8001b46:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b48:	69da      	ldr	r2, [r3, #28]
 8001b4a:	3904      	subs	r1, #4
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	6929      	ldr	r1, [r5, #16]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	61da      	str	r2, [r3, #28]
      break;
 8001b58:	e7a2      	b.n	8001aa0 <HAL_TIM_PWM_ConfigChannel+0xf8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b5a:	4814      	ldr	r0, [pc, #80]	@ (8001bac <HAL_TIM_PWM_ConfigChannel+0x204>)
 8001b5c:	4010      	ands	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b5e:	68ea      	ldr	r2, [r5, #12]
 8001b60:	0212      	lsls	r2, r2, #8
 8001b62:	4302      	orrs	r2, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b64:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8001b66:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b68:	4811      	ldr	r0, [pc, #68]	@ (8001bb0 <HAL_TIM_PWM_ConfigChannel+0x208>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b6a:	69af      	ldr	r7, [r5, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b6c:	4008      	ands	r0, r1
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b6e:	6969      	ldr	r1, [r5, #20]
 8001b70:	4339      	orrs	r1, r7
 8001b72:	0109      	lsls	r1, r1, #4
 8001b74:	4301      	orrs	r1, r0
 8001b76:	e7dd      	b.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8001b78:	2002      	movs	r0, #2
 8001b7a:	e794      	b.n	8001aa6 <HAL_TIM_PWM_ConfigChannel+0xfe>
 8001b7c:	ffff8cff 	.word	0xffff8cff
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40014000 	.word	0x40014000
 8001b88:	40014400 	.word	0x40014400
 8001b8c:	40014800 	.word	0x40014800
 8001b90:	fffffbff 	.word	0xfffffbff
 8001b94:	ffffefff 	.word	0xffffefff
 8001b98:	ffffdfff 	.word	0xffffdfff
 8001b9c:	ffffbfff 	.word	0xffffbfff
 8001ba0:	fffff3ff 	.word	0xfffff3ff
 8001ba4:	fffffeff 	.word	0xfffffeff
 8001ba8:	fffffdff 	.word	0xfffffdff
 8001bac:	fffff7ff 	.word	0xfffff7ff
 8001bb0:	ffffcfff 	.word	0xffffcfff

08001bb4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001bb4:	223c      	movs	r2, #60	@ 0x3c
{
 8001bb6:	b570      	push	{r4, r5, r6, lr}
 8001bb8:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001bba:	5c80      	ldrb	r0, [r0, r2]
 8001bbc:	2801      	cmp	r0, #1
 8001bbe:	d100      	bne.n	8001bc2 <HAL_TIM_ConfigClockSource+0xe>
 8001bc0:	e06f      	b.n	8001ca2 <HAL_TIM_ConfigClockSource+0xee>
 8001bc2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001bc6:	549c      	strb	r4, [r3, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc8:	3201      	adds	r2, #1
 8001bca:	5498      	strb	r0, [r3, r2]
  tmpsmcr = htim->Instance->SMCR;
 8001bcc:	681a      	ldr	r2, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bce:	4d4e      	ldr	r5, [pc, #312]	@ (8001d08 <HAL_TIM_ConfigClockSource+0x154>)
  tmpsmcr = htim->Instance->SMCR;
 8001bd0:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bd2:	4028      	ands	r0, r5
  htim->Instance->SMCR = tmpsmcr;
 8001bd4:	6090      	str	r0, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001bd6:	6808      	ldr	r0, [r1, #0]
 8001bd8:	2860      	cmp	r0, #96	@ 0x60
 8001bda:	d100      	bne.n	8001bde <HAL_TIM_ConfigClockSource+0x2a>
 8001bdc:	e07a      	b.n	8001cd4 <HAL_TIM_ConfigClockSource+0x120>
 8001bde:	d80b      	bhi.n	8001bf8 <HAL_TIM_ConfigClockSource+0x44>
 8001be0:	2840      	cmp	r0, #64	@ 0x40
 8001be2:	d060      	beq.n	8001ca6 <HAL_TIM_ConfigClockSource+0xf2>
 8001be4:	d829      	bhi.n	8001c3a <HAL_TIM_ConfigClockSource+0x86>
 8001be6:	2820      	cmp	r0, #32
 8001be8:	d053      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0xde>
 8001bea:	d850      	bhi.n	8001c8e <HAL_TIM_ConfigClockSource+0xda>
 8001bec:	2110      	movs	r1, #16
 8001bee:	0004      	movs	r4, r0
 8001bf0:	438c      	bics	r4, r1
 8001bf2:	d04e      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0xde>
      status = HAL_ERROR;
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	e019      	b.n	8001c2c <HAL_TIM_ConfigClockSource+0x78>
  switch (sClockSourceConfig->ClockSource)
 8001bf8:	2480      	movs	r4, #128	@ 0x80
 8001bfa:	0164      	lsls	r4, r4, #5
 8001bfc:	42a0      	cmp	r0, r4
 8001bfe:	d014      	beq.n	8001c2a <HAL_TIM_ConfigClockSource+0x76>
 8001c00:	2480      	movs	r4, #128	@ 0x80
 8001c02:	01a4      	lsls	r4, r4, #6
 8001c04:	42a0      	cmp	r0, r4
 8001c06:	d031      	beq.n	8001c6c <HAL_TIM_ConfigClockSource+0xb8>
 8001c08:	2870      	cmp	r0, #112	@ 0x70
 8001c0a:	d1f3      	bne.n	8001bf4 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8001c0c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c0e:	483f      	ldr	r0, [pc, #252]	@ (8001d0c <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c10:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c12:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c14:	6888      	ldr	r0, [r1, #8]
 8001c16:	68c9      	ldr	r1, [r1, #12]
 8001c18:	4328      	orrs	r0, r5
 8001c1a:	0209      	lsls	r1, r1, #8
 8001c1c:	4301      	orrs	r1, r0
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c1e:	2077      	movs	r0, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c20:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8001c22:	6091      	str	r1, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001c24:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c26:	4301      	orrs	r1, r0
      htim->Instance->SMCR = tmpsmcr;
 8001c28:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	223d      	movs	r2, #61	@ 0x3d
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001c32:	2100      	movs	r1, #0
 8001c34:	3a01      	subs	r2, #1
 8001c36:	5499      	strb	r1, [r3, r2]
}
 8001c38:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c3a:	2850      	cmp	r0, #80	@ 0x50
 8001c3c:	d1da      	bne.n	8001bf4 <HAL_TIM_ConfigClockSource+0x40>
  tmpccer = TIMx->CCER;
 8001c3e:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c40:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8001c42:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c44:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8001c46:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c48:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c4a:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001c4c:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c4e:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c50:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c52:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c54:	240a      	movs	r4, #10
 8001c56:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8001c58:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8001c5a:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8001c5c:	6210      	str	r0, [r2, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c5e:	2070      	movs	r0, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8001c60:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c62:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c64:	3819      	subs	r0, #25
 8001c66:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8001c68:	6091      	str	r1, [r2, #8]
}
 8001c6a:	e7de      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0x76>
  tmpsmcr = TIMx->SMCR;
 8001c6c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c6e:	4827      	ldr	r0, [pc, #156]	@ (8001d0c <HAL_TIM_ConfigClockSource+0x158>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c70:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c72:	4004      	ands	r4, r0
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c74:	6888      	ldr	r0, [r1, #8]
 8001c76:	68c9      	ldr	r1, [r1, #12]
 8001c78:	4328      	orrs	r0, r5
 8001c7a:	0209      	lsls	r1, r1, #8
 8001c7c:	4301      	orrs	r1, r0
 8001c7e:	4321      	orrs	r1, r4
  TIMx->SMCR = tmpsmcr;
 8001c80:	6091      	str	r1, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	6890      	ldr	r0, [r2, #8]
 8001c86:	01c9      	lsls	r1, r1, #7
 8001c88:	4301      	orrs	r1, r0
 8001c8a:	6091      	str	r1, [r2, #8]
      break;
 8001c8c:	e7cd      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0x76>
  switch (sClockSourceConfig->ClockSource)
 8001c8e:	2830      	cmp	r0, #48	@ 0x30
 8001c90:	d1b0      	bne.n	8001bf4 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c92:	2470      	movs	r4, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8001c94:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c96:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c98:	4301      	orrs	r1, r0
 8001c9a:	2007      	movs	r0, #7
 8001c9c:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8001c9e:	6091      	str	r1, [r2, #8]
}
 8001ca0:	e7c3      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0x76>
  __HAL_LOCK(htim);
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	e7c8      	b.n	8001c38 <HAL_TIM_ConfigClockSource+0x84>
  tmpccer = TIMx->CCER;
 8001ca6:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ca8:	6a16      	ldr	r6, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8001caa:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cac:	43a6      	bics	r6, r4
                               sClockSourceConfig->ClockFilter);
 8001cae:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb0:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cb2:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001cb4:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cb6:	0109      	lsls	r1, r1, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cb8:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cba:	4321      	orrs	r1, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cbc:	240a      	movs	r4, #10
 8001cbe:	43a5      	bics	r5, r4
  tmpccer |= TIM_ICPolarity;
 8001cc0:	4328      	orrs	r0, r5
  TIMx->CCMR1 = tmpccmr1;
 8001cc2:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8001cc4:	6210      	str	r0, [r2, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cc6:	2070      	movs	r0, #112	@ 0x70
  tmpsmcr = TIMx->SMCR;
 8001cc8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cca:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ccc:	3829      	subs	r0, #41	@ 0x29
 8001cce:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8001cd0:	6091      	str	r1, [r2, #8]
}
 8001cd2:	e7aa      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0x76>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cd4:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8001cd6:	6a15      	ldr	r5, [r2, #32]
                               sClockSourceConfig->ClockPolarity,
 8001cd8:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001cda:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cdc:	6a11      	ldr	r1, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cde:	0324      	lsls	r4, r4, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ce0:	43b1      	bics	r1, r6
 8001ce2:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ce4:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ce6:	4e0a      	ldr	r6, [pc, #40]	@ (8001d10 <HAL_TIM_ConfigClockSource+0x15c>)
 8001ce8:	4031      	ands	r1, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cea:	430c      	orrs	r4, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cec:	21a0      	movs	r1, #160	@ 0xa0
 8001cee:	438d      	bics	r5, r1
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cf0:	0101      	lsls	r1, r0, #4
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cf2:	2070      	movs	r0, #112	@ 0x70
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cf4:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8001cf6:	6194      	str	r4, [r2, #24]
  TIMx->CCER = tmpccer;
 8001cf8:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001cfa:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cfc:	4381      	bics	r1, r0
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001cfe:	3809      	subs	r0, #9
 8001d00:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8001d02:	6091      	str	r1, [r2, #8]
}
 8001d04:	e791      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0x76>
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	ffff0088 	.word	0xffff0088
 8001d0c:	ffff00ff 	.word	0xffff00ff
 8001d10:	ffff0fff 	.word	0xffff0fff

08001d14 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001d14:	233c      	movs	r3, #60	@ 0x3c
{
 8001d16:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001d18:	5cc2      	ldrb	r2, [r0, r3]
 8001d1a:	2a01      	cmp	r2, #1
 8001d1c:	d042      	beq.n	8001da4 <HAL_TIM_SlaveConfigSynchro+0x90>
 8001d1e:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	2202      	movs	r2, #2
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d22:	2470      	movs	r4, #112	@ 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d24:	2607      	movs	r6, #7
  __HAL_LOCK(htim);
 8001d26:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	3301      	adds	r3, #1
 8001d2a:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001d2c:	6802      	ldr	r2, [r0, #0]
 8001d2e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d30:	43a3      	bics	r3, r4
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d32:	684c      	ldr	r4, [r1, #4]
 8001d34:	4323      	orrs	r3, r4
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001d36:	43b3      	bics	r3, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d38:	680e      	ldr	r6, [r1, #0]
 8001d3a:	4333      	orrs	r3, r6
  htim->Instance->SMCR = tmpsmcr;
 8001d3c:	6093      	str	r3, [r2, #8]
  switch (sSlaveConfig->InputTrigger)
 8001d3e:	2c50      	cmp	r4, #80	@ 0x50
 8001d40:	d054      	beq.n	8001dec <HAL_TIM_SlaveConfigSynchro+0xd8>
 8001d42:	d91e      	bls.n	8001d82 <HAL_TIM_SlaveConfigSynchro+0x6e>
 8001d44:	2c60      	cmp	r4, #96	@ 0x60
 8001d46:	d02f      	beq.n	8001da8 <HAL_TIM_SlaveConfigSynchro+0x94>
 8001d48:	2c70      	cmp	r4, #112	@ 0x70
 8001d4a:	d123      	bne.n	8001d94 <HAL_TIM_SlaveConfigSynchro+0x80>
  tmpsmcr = TIMx->SMCR;
 8001d4c:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d4e:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <HAL_TIM_SlaveConfigSynchro+0x100>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d50:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d52:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d54:	68cb      	ldr	r3, [r1, #12]
 8001d56:	6909      	ldr	r1, [r1, #16]
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	0209      	lsls	r1, r1, #8
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001d60:	6093      	str	r3, [r2, #8]
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001d62:	2140      	movs	r1, #64	@ 0x40
 8001d64:	68d3      	ldr	r3, [r2, #12]
 8001d66:	438b      	bics	r3, r1
 8001d68:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001d6a:	68d3      	ldr	r3, [r2, #12]
 8001d6c:	492a      	ldr	r1, [pc, #168]	@ (8001e18 <HAL_TIM_SlaveConfigSynchro+0x104>)
 8001d6e:	400b      	ands	r3, r1
 8001d70:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001d72:	233d      	movs	r3, #61	@ 0x3d
 8001d74:	2201      	movs	r2, #1
 8001d76:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001d7e:	2000      	movs	r0, #0
 8001d80:	e011      	b.n	8001da6 <HAL_TIM_SlaveConfigSynchro+0x92>
  switch (sSlaveConfig->InputTrigger)
 8001d82:	2c40      	cmp	r4, #64	@ 0x40
 8001d84:	d023      	beq.n	8001dce <HAL_TIM_SlaveConfigSynchro+0xba>
 8001d86:	d805      	bhi.n	8001d94 <HAL_TIM_SlaveConfigSynchro+0x80>
 8001d88:	2c20      	cmp	r4, #32
 8001d8a:	d0ea      	beq.n	8001d62 <HAL_TIM_SlaveConfigSynchro+0x4e>
 8001d8c:	d83f      	bhi.n	8001e0e <HAL_TIM_SlaveConfigSynchro+0xfa>
 8001d8e:	2310      	movs	r3, #16
 8001d90:	439c      	bics	r4, r3
 8001d92:	d0e6      	beq.n	8001d62 <HAL_TIM_SlaveConfigSynchro+0x4e>
    htim->State = HAL_TIM_STATE_READY;
 8001d94:	233d      	movs	r3, #61	@ 0x3d
 8001d96:	2201      	movs	r2, #1
 8001d98:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001da0:	2001      	movs	r0, #1
 8001da2:	e000      	b.n	8001da6 <HAL_TIM_SlaveConfigSynchro+0x92>
  __HAL_LOCK(htim);
 8001da4:	2002      	movs	r0, #2
}
 8001da6:	bd70      	pop	{r4, r5, r6, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001da8:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8001daa:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dac:	6a15      	ldr	r5, [r2, #32]
                               sSlaveConfig->TriggerPolarity,
 8001dae:	688b      	ldr	r3, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001db0:	43b5      	bics	r5, r6
                               sSlaveConfig->TriggerFilter);
 8001db2:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001db4:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001db6:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001db8:	4e18      	ldr	r6, [pc, #96]	@ (8001e1c <HAL_TIM_SlaveConfigSynchro+0x108>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dba:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dbc:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dbe:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dc0:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dc2:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dc4:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dc6:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001dc8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8001dca:	6213      	str	r3, [r2, #32]
      break;
 8001dcc:	e7c9      	b.n	8001d62 <HAL_TIM_SlaveConfigSynchro+0x4e>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8001dce:	2e05      	cmp	r6, #5
 8001dd0:	d0e0      	beq.n	8001d94 <HAL_TIM_SlaveConfigSynchro+0x80>
      tmpccer = htim->Instance->CCER;
 8001dd2:	6a16      	ldr	r6, [r2, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dd4:	6a13      	ldr	r3, [r2, #32]
 8001dd6:	43ab      	bics	r3, r5
 8001dd8:	6213      	str	r3, [r2, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dda:	23f0      	movs	r3, #240	@ 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8001ddc:	6994      	ldr	r4, [r2, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dde:	439c      	bics	r4, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001de0:	690b      	ldr	r3, [r1, #16]
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	4323      	orrs	r3, r4
      htim->Instance->CCMR1 = tmpccmr1;
 8001de6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCER = tmpccer;
 8001de8:	6216      	str	r6, [r2, #32]
      break;
 8001dea:	e7ba      	b.n	8001d62 <HAL_TIM_SlaveConfigSynchro+0x4e>
                               sSlaveConfig->TriggerPolarity,
 8001dec:	688c      	ldr	r4, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8001dee:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8001df0:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df2:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001df4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df6:	43ae      	bics	r6, r5
 8001df8:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dfa:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001dfc:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dfe:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e00:	432b      	orrs	r3, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e02:	250a      	movs	r5, #10
 8001e04:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8001e06:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001e08:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001e0a:	6211      	str	r1, [r2, #32]
      break;
 8001e0c:	e7a9      	b.n	8001d62 <HAL_TIM_SlaveConfigSynchro+0x4e>
  switch (sSlaveConfig->InputTrigger)
 8001e0e:	2c30      	cmp	r4, #48	@ 0x30
 8001e10:	d0a7      	beq.n	8001d62 <HAL_TIM_SlaveConfigSynchro+0x4e>
 8001e12:	e7bf      	b.n	8001d94 <HAL_TIM_SlaveConfigSynchro+0x80>
 8001e14:	ffff00ff 	.word	0xffff00ff
 8001e18:	ffffbfff 	.word	0xffffbfff
 8001e1c:	ffff0fff 	.word	0xffff0fff

08001e20 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8001e20:	4770      	bx	lr
 8001e22:	46c0      	nop			@ (mov r8, r8)

08001e24 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8001e24:	4770      	bx	lr
 8001e26:	46c0      	nop			@ (mov r8, r8)

08001e28 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8001e28:	4770      	bx	lr
 8001e2a:	46c0      	nop			@ (mov r8, r8)

08001e2c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8001e2c:	4770      	bx	lr
 8001e2e:	46c0      	nop			@ (mov r8, r8)

08001e30 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8001e30:	4770      	bx	lr
 8001e32:	46c0      	nop			@ (mov r8, r8)

08001e34 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e34:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 8001e36:	6803      	ldr	r3, [r0, #0]
{
 8001e38:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8001e3a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e3c:	691d      	ldr	r5, [r3, #16]
{
 8001e3e:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e40:	422a      	tst	r2, r5
 8001e42:	d001      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e44:	4232      	tst	r2, r6
 8001e46:	d15a      	bne.n	8001efe <HAL_TIM_IRQHandler+0xca>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e48:	2304      	movs	r3, #4
 8001e4a:	422b      	tst	r3, r5
 8001e4c:	d001      	beq.n	8001e52 <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e4e:	4233      	tst	r3, r6
 8001e50:	d141      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0xa2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e52:	2308      	movs	r3, #8
 8001e54:	422b      	tst	r3, r5
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e58:	4233      	tst	r3, r6
 8001e5a:	d12a      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x7e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	422b      	tst	r3, r5
 8001e60:	d001      	beq.n	8001e66 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e62:	4233      	tst	r3, r6
 8001e64:	d114      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x5c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e66:	2301      	movs	r3, #1
 8001e68:	422b      	tst	r3, r5
 8001e6a:	d001      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e6c:	4233      	tst	r3, r6
 8001e6e:	d15a      	bne.n	8001f26 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e70:	2380      	movs	r3, #128	@ 0x80
 8001e72:	422b      	tst	r3, r5
 8001e74:	d001      	beq.n	8001e7a <HAL_TIM_IRQHandler+0x46>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e76:	4233      	tst	r3, r6
 8001e78:	d15d      	bne.n	8001f36 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e7a:	2340      	movs	r3, #64	@ 0x40
 8001e7c:	422b      	tst	r3, r5
 8001e7e:	d001      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e80:	4233      	tst	r3, r6
 8001e82:	d160      	bne.n	8001f46 <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e84:	2320      	movs	r3, #32
 8001e86:	422b      	tst	r3, r5
 8001e88:	d001      	beq.n	8001e8e <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e8a:	4233      	tst	r3, r6
 8001e8c:	d143      	bne.n	8001f16 <HAL_TIM_IRQHandler+0xe2>
}
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e90:	2211      	movs	r2, #17
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	4252      	negs	r2, r2
 8001e96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e98:	3219      	adds	r2, #25
 8001e9a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	23c0      	movs	r3, #192	@ 0xc0
 8001ea0:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea4:	421a      	tst	r2, r3
 8001ea6:	d062      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ea8:	f7ff ffbe 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eac:	2300      	movs	r3, #0
 8001eae:	7723      	strb	r3, [r4, #28]
 8001eb0:	e7d9      	b.n	8001e66 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb2:	2209      	movs	r2, #9
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	4252      	negs	r2, r2
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eba:	320d      	adds	r2, #13
 8001ebc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebe:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec0:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec2:	079b      	lsls	r3, r3, #30
 8001ec4:	d150      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	f7ff ffad 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eca:	0020      	movs	r0, r4
 8001ecc:	f7ff ffae 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	7723      	strb	r3, [r4, #28]
 8001ed4:	e7c2      	b.n	8001e5c <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ed6:	2205      	movs	r2, #5
 8001ed8:	6823      	ldr	r3, [r4, #0]
 8001eda:	4252      	negs	r2, r2
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ede:	3207      	adds	r2, #7
 8001ee0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	23c0      	movs	r3, #192	@ 0xc0
 8001ee6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eea:	421a      	tst	r2, r3
 8001eec:	d139      	bne.n	8001f62 <HAL_TIM_IRQHandler+0x12e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	f7ff ff99 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef2:	0020      	movs	r0, r4
 8001ef4:	f7ff ff9a 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	7723      	strb	r3, [r4, #28]
 8001efc:	e7a9      	b.n	8001e52 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001efe:	3a05      	subs	r2, #5
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	3204      	adds	r2, #4
 8001f04:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	079b      	lsls	r3, r3, #30
 8001f0a:	d024      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x122>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	f7ff ff8c 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f10:	2300      	movs	r3, #0
 8001f12:	7723      	strb	r3, [r4, #28]
 8001f14:	e798      	b.n	8001e48 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f16:	2221      	movs	r2, #33	@ 0x21
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8001f1c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001f20:	f000 f88c 	bl	800203c <HAL_TIMEx_CommutCallback>
}
 8001f24:	e7b3      	b.n	8001e8e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f26:	2202      	movs	r2, #2
 8001f28:	6823      	ldr	r3, [r4, #0]
 8001f2a:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f2c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f30:	f7ff ff76 	bl	8001e20 <HAL_TIM_PeriodElapsedCallback>
 8001f34:	e79c      	b.n	8001e70 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f36:	2281      	movs	r2, #129	@ 0x81
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	4252      	negs	r2, r2
      HAL_TIMEx_BreakCallback(htim);
 8001f3c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f3e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f40:	f000 f87e 	bl	8002040 <HAL_TIMEx_BreakCallback>
 8001f44:	e799      	b.n	8001e7a <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f46:	2241      	movs	r2, #65	@ 0x41
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8001f4c:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f4e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f50:	f7ff ff6e 	bl	8001e30 <HAL_TIM_TriggerCallback>
 8001f54:	e796      	b.n	8001e84 <HAL_TIM_IRQHandler+0x50>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	f7ff ff65 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5a:	0020      	movs	r0, r4
 8001f5c:	f7ff ff66 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f60:	e7d6      	b.n	8001f10 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	f7ff ff61 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001f66:	e7c7      	b.n	8001ef8 <HAL_TIM_IRQHandler+0xc4>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f68:	f7ff ff5e 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e7b0      	b.n	8001ed0 <HAL_TIM_IRQHandler+0x9c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	f7ff ff59 	bl	8001e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7ff ff5a 	bl	8001e2c <HAL_TIM_PWM_PulseFinishedCallback>
 8001f78:	e798      	b.n	8001eac <HAL_TIM_IRQHandler+0x78>
 8001f7a:	46c0      	nop			@ (mov r8, r8)

08001f7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f7c:	233c      	movs	r3, #60	@ 0x3c
{
 8001f7e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001f80:	5cc3      	ldrb	r3, [r0, r3]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f86:	233d      	movs	r3, #61	@ 0x3d
 8001f88:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f8a:	2570      	movs	r5, #112	@ 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8001f8e:	6803      	ldr	r3, [r0, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001f92:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f94:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f96:	680d      	ldr	r5, [r1, #0]
 8001f98:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d005      	beq.n	8001fae <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d002      	beq.n	8001fae <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d104      	bne.n	8001fb8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fb2:	684a      	ldr	r2, [r1, #4]
 8001fb4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fb6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fb8:	233d      	movs	r3, #61	@ 0x3d
 8001fba:	2201      	movs	r2, #1
 8001fbc:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8001fc4:	2000      	movs	r0, #0
}
 8001fc6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001fc8:	2002      	movs	r0, #2
 8001fca:	e7fc      	b.n	8001fc6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fd8:	223c      	movs	r2, #60	@ 0x3c
{
 8001fda:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001fdc:	5c83      	ldrb	r3, [r0, r2]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d01e      	beq.n	8002020 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001fe2:	68cb      	ldr	r3, [r1, #12]
 8001fe4:	4c0f      	ldr	r4, [pc, #60]	@ (8002024 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8001fe6:	4023      	ands	r3, r4
 8001fe8:	688c      	ldr	r4, [r1, #8]
 8001fea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001fec:	4c0e      	ldr	r4, [pc, #56]	@ (8002028 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8001fee:	4023      	ands	r3, r4
 8001ff0:	684c      	ldr	r4, [r1, #4]
 8001ff2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001ff4:	4c0d      	ldr	r4, [pc, #52]	@ (800202c <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8001ff6:	4023      	ands	r3, r4
 8001ff8:	680c      	ldr	r4, [r1, #0]
 8001ffa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001ffc:	4c0c      	ldr	r4, [pc, #48]	@ (8002030 <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8001ffe:	4023      	ands	r3, r4
 8002000:	690c      	ldr	r4, [r1, #16]
 8002002:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002004:	4c0b      	ldr	r4, [pc, #44]	@ (8002034 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8002006:	4023      	ands	r3, r4
 8002008:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800200a:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800200c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800200e:	4c0a      	ldr	r4, [pc, #40]	@ (8002038 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8002010:	4023      	ands	r3, r4
 8002012:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002014:	6801      	ldr	r1, [r0, #0]
 8002016:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002018:	2300      	movs	r3, #0
 800201a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 800201c:	2000      	movs	r0, #0
}
 800201e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8002020:	2002      	movs	r0, #2
 8002022:	e7fc      	b.n	800201e <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8002024:	fffffcff 	.word	0xfffffcff
 8002028:	fffffbff 	.word	0xfffffbff
 800202c:	fffff7ff 	.word	0xfffff7ff
 8002030:	ffffefff 	.word	0xffffefff
 8002034:	ffffdfff 	.word	0xffffdfff
 8002038:	ffffbfff 	.word	0xffffbfff

0800203c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800203c:	4770      	bx	lr
 800203e:	46c0      	nop			@ (mov r8, r8)

08002040 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002040:	4770      	bx	lr
 8002042:	46c0      	nop			@ (mov r8, r8)

08002044 <memset>:
 8002044:	0003      	movs	r3, r0
 8002046:	1882      	adds	r2, r0, r2
 8002048:	4293      	cmp	r3, r2
 800204a:	d100      	bne.n	800204e <memset+0xa>
 800204c:	4770      	bx	lr
 800204e:	7019      	strb	r1, [r3, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	e7f9      	b.n	8002048 <memset+0x4>

08002054 <__libc_init_array>:
 8002054:	b570      	push	{r4, r5, r6, lr}
 8002056:	2600      	movs	r6, #0
 8002058:	4c0c      	ldr	r4, [pc, #48]	@ (800208c <__libc_init_array+0x38>)
 800205a:	4d0d      	ldr	r5, [pc, #52]	@ (8002090 <__libc_init_array+0x3c>)
 800205c:	1b64      	subs	r4, r4, r5
 800205e:	10a4      	asrs	r4, r4, #2
 8002060:	42a6      	cmp	r6, r4
 8002062:	d109      	bne.n	8002078 <__libc_init_array+0x24>
 8002064:	2600      	movs	r6, #0
 8002066:	f000 f819 	bl	800209c <_init>
 800206a:	4c0a      	ldr	r4, [pc, #40]	@ (8002094 <__libc_init_array+0x40>)
 800206c:	4d0a      	ldr	r5, [pc, #40]	@ (8002098 <__libc_init_array+0x44>)
 800206e:	1b64      	subs	r4, r4, r5
 8002070:	10a4      	asrs	r4, r4, #2
 8002072:	42a6      	cmp	r6, r4
 8002074:	d105      	bne.n	8002082 <__libc_init_array+0x2e>
 8002076:	bd70      	pop	{r4, r5, r6, pc}
 8002078:	00b3      	lsls	r3, r6, #2
 800207a:	58eb      	ldr	r3, [r5, r3]
 800207c:	4798      	blx	r3
 800207e:	3601      	adds	r6, #1
 8002080:	e7ee      	b.n	8002060 <__libc_init_array+0xc>
 8002082:	00b3      	lsls	r3, r6, #2
 8002084:	58eb      	ldr	r3, [r5, r3]
 8002086:	4798      	blx	r3
 8002088:	3601      	adds	r6, #1
 800208a:	e7f2      	b.n	8002072 <__libc_init_array+0x1e>
 800208c:	080020e4 	.word	0x080020e4
 8002090:	080020e4 	.word	0x080020e4
 8002094:	080020e8 	.word	0x080020e8
 8002098:	080020e4 	.word	0x080020e4

0800209c <_init>:
 800209c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020a2:	bc08      	pop	{r3}
 80020a4:	469e      	mov	lr, r3
 80020a6:	4770      	bx	lr

080020a8 <_fini>:
 80020a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020aa:	46c0      	nop			@ (mov r8, r8)
 80020ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ae:	bc08      	pop	{r3}
 80020b0:	469e      	mov	lr, r3
 80020b2:	4770      	bx	lr
